{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"D:\\\\17\\u5C08\\u6848\\\\\\u5BA2\\u88FD\\u5316ui\\u5C08\\u6848\\\\test2\\\\vmo-frontend-2008-tw-momo\\\\packages\\\\web\\\\components\\\\leaderboard\\\\LeaderboardGeneral.tsx\";\nimport React, { useContext, memo, useMemo, useRef } from 'react';\nimport { useMinSectionTracking, createSectionViewAction } from '17media-browser-spy';\nimport { VirtualizedList, CopyButton } from '@vmo/ui';\nimport { TranslationContext } from '@vmo/web/context/translationContext';\nimport { useFilter } from '@vmo/ui/hooks';\nimport { trackingSource } from '@vmo/share/17appTrack';\nimport { WrapFilter, NoData, WrapLeaderboardItem, FrameBorder, ToggleButton } from './style';\nimport { MissionPanelContext } from '../../context/missionPanelContext';\n\nconst LeaderboardGeneral = ({\n  leaderboardData,\n  render,\n  itemHeight,\n  panelSize = 0,\n  withMissions = false\n}) => {\n  const translation = useContext(TranslationContext);\n  const {\n    data,\n    handleOnChange\n  } = useFilter(leaderboardData);\n  const refFilter = useRef(null);\n  const refLeaderboard = useRef(null);\n  const panelState = useContext(MissionPanelContext);\n  const {\n    showPanelID,\n    setShowPanelID,\n    setMissionDetails\n  } = panelState;\n  useMinSectionTracking(refFilter, () => {\n    trackingSource.track(createSectionViewAction('searchBar'));\n  });\n  useMinSectionTracking(refLeaderboard, () => {\n    trackingSource.track(createSectionViewAction('leaderboardItem'));\n  });\n\n  const handleToggleButton = useId => {\n    const newIndex = showPanelID === useId ? '' : useId;\n    setShowPanelID(newIndex);\n    setMissionDetails([]);\n  };\n\n  const Row = ({\n    index\n  }) => React.createElement(WrapLeaderboardItem, {\n    key: data[index].userID,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, render(data[index], showPanelID === data[index].userID), withMissions && React.createElement(ToggleButton, {\n    isOpen: showPanelID === data[index].userID,\n    onClick: () => handleToggleButton(data[index].userID),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n\n  const Filter = useMemo(() => React.createElement(WrapFilter, {\n    ref: refFilter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: translation.get('SEARCH_PLACEHOLDER'),\n    onChange: evt => handleOnChange(evt.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }))), [handleOnChange, translation]);\n  return React.createElement(React.Fragment, null, React.createElement(FrameBorder, {\n    ref: refLeaderboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, Filter, React.createElement(CopyButton, {\n    data: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), data.length > 0 ? React.createElement(VirtualizedList, {\n    dataset: data,\n    itemHeight: itemHeight,\n    updateOnID: showPanelID,\n    panelSize: panelSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, Row) : React.createElement(NoData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, translation.get('EMPTY_LEADERBOARD'))));\n};\n\nexport default memo(LeaderboardGeneral, (prev, next) => _JSON$stringify(prev) === _JSON$stringify(next));","map":{"version":3,"sources":["D:\\17專案\\客製化ui專案\\test2\\vmo-frontend-2008-tw-momo\\packages\\web\\components\\leaderboard\\LeaderboardGeneral.tsx"],"names":["React","useContext","memo","useMemo","useRef","useMinSectionTracking","createSectionViewAction","VirtualizedList","CopyButton","TranslationContext","useFilter","trackingSource","WrapFilter","NoData","WrapLeaderboardItem","FrameBorder","ToggleButton","MissionPanelContext","LeaderboardGeneral","leaderboardData","render","itemHeight","panelSize","withMissions","translation","data","handleOnChange","refFilter","refLeaderboard","panelState","showPanelID","setShowPanelID","setMissionDetails","track","handleToggleButton","useId","newIndex","Row","index","userID","Filter","get","evt","target","value","length","prev","next"],"mappings":"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","sourcesContent":["import React, { useContext, memo, useMemo, ReactNode, useRef } from 'react';\nimport {\n  useMinSectionTracking,\n  createSectionViewAction,\n} from '17media-browser-spy';\n\nimport { VirtualizedList, CopyButton } from '@vmo/ui';\nimport { LeaderboardItem as LeaderboardItemInterface } from '@vmo/share/interfaces/LeaderboardItem';\nimport { TranslationContext } from '@vmo/web/context/translationContext';\nimport { useFilter } from '@vmo/ui/hooks';\nimport { trackingSource } from '@vmo/share/17appTrack';\n\nimport {\n  WrapFilter,\n  NoData,\n  WrapLeaderboardItem,\n  FrameBorder,\n  ToggleButton,\n} from './style';\nimport { MissionPanelContext } from '../../context/missionPanelContext';\n\nconst LeaderboardGeneral: React.FC<{\n  leaderboardData: LeaderboardItemInterface[];\n  render(item: LeaderboardItemInterface, showPanel: boolean): ReactNode;\n  itemHeight: number;\n  panelSize?: number;\n  withMissions?: boolean;\n}> = ({\n  leaderboardData,\n  render,\n  itemHeight,\n  panelSize = 0,\n  withMissions = false,\n}) => {\n  const translation = useContext(TranslationContext);\n  const { data, handleOnChange } = useFilter(leaderboardData);\n  const refFilter = useRef(null);\n  const refLeaderboard = useRef(null);\n  const panelState = useContext(MissionPanelContext);\n  const { showPanelID, setShowPanelID, setMissionDetails } = panelState;\n\n  useMinSectionTracking(refFilter, () => {\n    trackingSource.track(createSectionViewAction('searchBar'));\n  });\n\n  useMinSectionTracking(refLeaderboard, () => {\n    trackingSource.track(createSectionViewAction('leaderboardItem'));\n  });\n\n  const handleToggleButton = (useId: string) => {\n    const newIndex = showPanelID === useId ? '' : useId;\n    setShowPanelID(newIndex);\n    setMissionDetails([]);\n  };\n\n  const Row = ({ index }: { index: number }) => (\n    <WrapLeaderboardItem key={data[index].userID}>\n      {render(data[index], showPanelID === data[index].userID)}\n      {withMissions && (\n        <ToggleButton\n          isOpen={showPanelID === data[index].userID}\n          onClick={() => handleToggleButton(data[index].userID)}\n        />\n      )}\n    </WrapLeaderboardItem>\n  );\n\n  const Filter = useMemo(\n    () => (\n      <WrapFilter ref={refFilter}>\n        <div>\n          <input\n            placeholder={translation.get('SEARCH_PLACEHOLDER')}\n            onChange={evt => handleOnChange(evt.target.value)}\n          />\n        </div>\n      </WrapFilter>\n    ),\n    [handleOnChange, translation],\n  );\n\n  return (\n    <>\n      {/* {Filter}\n      <CopyButton data={data} /> */}\n      <FrameBorder ref={refLeaderboard}>\n      {Filter}\n      <CopyButton data={data} />\n        {data.length > 0 ? (\n          <VirtualizedList\n            dataset={data}\n            itemHeight={itemHeight}\n            updateOnID={showPanelID}\n            panelSize={panelSize}\n          >\n            {Row}\n          </VirtualizedList>\n        ) : (\n          <NoData>{translation.get('EMPTY_LEADERBOARD')}</NoData>\n        )}\n      </FrameBorder>\n    </>\n  );\n};\n\nexport default memo(\n  LeaderboardGeneral,\n  (prev, next) => JSON.stringify(prev) === JSON.stringify(next),\n);\n"]},"metadata":{},"sourceType":"module"}