{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"D:\\\\17\\u5C08\\u6848\\\\\\u5BA2\\u88FD\\u5316ui\\u5C08\\u6848\\\\vmo-frontend-2011-tw-xmas\\\\packages\\\\web\\\\components\\\\leaderboard\\\\LeaderboardItem.tsx\";\nimport React, { useContext, memo } from 'react';\nimport { LeaderboardItem } from '@vmo/ui';\nimport { conditionMatch, numberFormat } from '@vmo/share/utils';\nimport { useDeepLink } from '@vmo/ui/hooks';\nimport { TranslationContext } from '@vmo/web/context/translationContext';\nimport images from '../../themes/images';\nimport LeaderboardGeneral from './LeaderboardGeneral';\nimport { WrapLeaderboardItem } from './style';\nimport MissionPanel from './MissionPanel';\nimport FrameBorder from '../frameBorder';\n\nconst getBackgroundColor = (item, condition, condIcon) => {\n  let backgroundColor = '#070027';\n\n  if (condIcon && condIcon.icon) {\n    backgroundColor = 'rgba(9, 0, 59, 0.92)';\n  }\n\n  if (condition && condition.bgs) {\n    const condBg = conditionMatch(condition.bgs, item);\n    backgroundColor = condBg && condBg.color ? condBg.color : 'rgba(9, 0, 59, 0.92)';\n  }\n\n  return backgroundColor;\n};\n\nconst RenderLeaderboardItem = memo(({\n  item,\n  condition,\n  showPanel\n}) => {\n  const translation = useContext(TranslationContext);\n  const {\n    handleClickItem\n  } = useDeepLink(item.userID, item.openID, item.roomID);\n  const condIcon = conditionMatch(condition.icons, item);\n  const backgroundColor = getBackgroundColor(item, condition, condIcon);\n\n  const getAdditionalText = () => {\n    let additionalText = '';\n\n    if (condition.withVote) {\n      additionalText = `${numberFormat(item.score)} 票 / ${numberFormat(item.meta.amount)}分`;\n    }\n\n    if (condition.withBonus) {\n      additionalText = `${numberFormat(item.score)} 響叮噹 / ${numberFormat(item.meta.amount)}分`;\n    }\n\n    if (condition.withTotalScore) {\n      additionalText = `${numberFormat(item.score)} ( ${numberFormat(item.meta.vote || 0)} + ${numberFormat(item.meta.gift || 0)} ) 總積分`;\n    }\n\n    return additionalText;\n  };\n\n  return /*#__PURE__*/React.createElement(WrapLeaderboardItem, {\n    withButton: condition.missions && condition.missions.length > 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LeaderboardItem, _extends({\n    handleClickAvatar: handleClickItem,\n    isLive: item.roomID && item.roomID > 0,\n    theme: {\n      colorNickName: '#ffffff',\n      color: '#ffec17',\n      colorRankNumber: '#ffec17',\n      borderBottom: images.borderLine,\n      background: backgroundColor\n    }\n  }, item, {\n    icon: condIcon ? condIcon.icon : '',\n    unit: translation.get('UNIT'),\n    additionalText: getAdditionalText(),\n    isHighlight: true,\n    withBonus: false,\n    withVote: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  })), showPanel && /*#__PURE__*/React.createElement(MissionPanel, {\n    condition: condition,\n    userID: item.userID,\n    meta: item.meta,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }));\n});\n\nconst Leaderboard = ({\n  leaderboardData,\n  condition\n}) => {\n  let panelSize = 98;\n\n  if (condition.missions && condition.missions.length > 0) {\n    panelSize = condition.missions.length * 88 + 20;\n  }\n\n  return /*#__PURE__*/React.createElement(FrameBorder, {\n    title: '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LeaderboardGeneral, {\n    itemHeight: 78,\n    panelSize: panelSize,\n    leaderboardData: leaderboardData,\n    withMissions: condition.missions && condition.missions.length > 0,\n    withBonus: condition.withBonus,\n    render: (item, showPanel) => {\n      return /*#__PURE__*/React.createElement(RenderLeaderboardItem, {\n        item: item,\n        condition: condition,\n        showPanel: showPanel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default memo(Leaderboard); // 2008-tw-momo\n// import React, { useContext, memo } from 'react';\n// import { LeaderboardItem } from '@vmo/ui';\n// import { conditionMatch, numberFormat } from '@vmo/share/utils';\n// import { useDeepLink } from '@vmo/ui/hooks';\n// import { LeaderboardItem as LeaderboardItemInterface } from '@vmo/share/interfaces/LeaderboardItem';\n// import { TranslationContext } from '@vmo/web/context/translationContext';\n// import { ConditionInterface } from '../../constants/conditions';\n// import images from '../../themes/images';\n// import LeaderboardGeneral from './LeaderboardGeneral';\n// import { WrapLeaderboardItem } from './style';\n// import BonusPanel from './BonusPanel';\n// import FrameBorder from '../frameBorder';\n// const RenderLeaderboardItem: React.FC<{\n//   item: LeaderboardItemInterface;\n//   condition: ConditionInterface;\n//   showPanel: boolean;\n// }> = memo(({ item, condition, showPanel }) => {\n//   const translation = useContext(TranslationContext);\n//   const { handleClickItem } = useDeepLink(\n//     item.userID!,\n//     item.openID!,\n//     item.roomID,\n//   );\n//   const condIcon = conditionMatch(condition.icons!, item);\n//   const condBg = conditionMatch(condition.bgs!, item);\n//   return (\n//     <WrapLeaderboardItem\n//       withButton={condition.missions && condition.missions.length > 0}\n//     >\n//       <LeaderboardItem\n//         handleClickAvatar={handleClickItem}\n//         isLive={item.roomID && item.roomID > 0}\n//         theme={{\n//           colorNickName: '#ffffff',\n//           color: '#ce9914',\n//           colorRankNumber: '#ffffff',\n//           borderBottom: images.borderLine,\n//           background: condBg || 'rgba(9, 0, 59, 0.92);',\n//         }}\n//         {...item}\n//         icon={condIcon ? condIcon.icon : ''}\n//         unit={translation.get('UNIT')}\n//         isHighlight\n//         withBonus={condition.withBonus}\n//         withVote={false}\n//         bonus={Number.parseInt(item.meta.total, 10) || 0}\n//       />\n//       {showPanel && <BonusPanel meta={item.meta} />}\n//     </WrapLeaderboardItem>\n//   );\n// });\n// const Leaderboard: React.FC<{\n//   leaderboardData: LeaderboardItemInterface[];\n//   condition: ConditionInterface;\n// }> = ({ leaderboardData, condition }) => {\n//   const panelSize = 120;\n//   return (\n//     <FrameBorder title={''}>\n//       <LeaderboardGeneral\n//         itemHeight={90}\n//         panelSize={panelSize}\n//         leaderboardData={leaderboardData}\n//         withPanel={condition.withBnous}\n//         render={(item: LeaderboardItemInterface, showPanel: boolean) => {\n//           return (\n//             <RenderLeaderboardItem\n//               item={item}\n//               condition={condition}\n//               showPanel={showPanel}\n//             />\n//           );\n//         }}\n//       />\n//     </FrameBorder>\n//   );\n// };\n// export default memo(Leaderboard);","map":{"version":3,"sources":["D:/17專案/客製化ui專案/vmo-frontend-2011-tw-xmas/packages/web/components/leaderboard/LeaderboardItem.tsx"],"names":["React","useContext","memo","LeaderboardItem","conditionMatch","numberFormat","useDeepLink","TranslationContext","images","LeaderboardGeneral","WrapLeaderboardItem","MissionPanel","FrameBorder","getBackgroundColor","item","condition","condIcon","backgroundColor","icon","bgs","condBg","color","RenderLeaderboardItem","showPanel","translation","handleClickItem","userID","openID","roomID","icons","getAdditionalText","additionalText","withVote","score","meta","amount","withBonus","withTotalScore","vote","gift","missions","length","colorNickName","colorRankNumber","borderBottom","borderLine","background","get","Leaderboard","leaderboardData","panelSize"],"mappings":"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","sourcesContent":["\nimport React, { useContext, memo } from 'react';\n\nimport { LeaderboardItem } from '@vmo/ui';\nimport { conditionMatch, numberFormat } from '@vmo/share/utils';\nimport { useDeepLink } from '@vmo/ui/hooks';\nimport { LeaderboardItem as LeaderboardItemInterface } from '@vmo/share/interfaces/LeaderboardItem';\nimport { TranslationContext } from '@vmo/web/context/translationContext';\n\nimport { ConditionInterface } from '../../constants/conditions';\nimport images from '../../themes/images';\nimport LeaderboardGeneral from './LeaderboardGeneral';\nimport { WrapLeaderboardItem } from './style';\nimport MissionPanel from './MissionPanel';\nimport BonusPanel from './BonusPanel';\nimport FrameBorder from '../frameBorder';\n\nconst getBackgroundColor = (item, condition, condIcon) => {\n  let backgroundColor = '#070027';\n  if (condIcon && condIcon.icon) {\n    backgroundColor =  'rgba(9, 0, 59, 0.92)';\n  }\n  if (condition && condition.bgs) {\n    const condBg = conditionMatch(condition.bgs!, item);\n    backgroundColor =\n      condBg && condBg.color\n        ? condBg.color\n        :  'rgba(9, 0, 59, 0.92)';\n  }\n\n  return backgroundColor;\n};\n\nconst RenderLeaderboardItem: React.FC<{\n  item: LeaderboardItemInterface;\n  condition: ConditionInterface;\n  showPanel: boolean;\n  showPanel2: boolean;\n}> = memo(({ item, condition, showPanel }) => {\n  const translation = useContext(TranslationContext);\n  const { handleClickItem } = useDeepLink(\n    item.userID!,\n    item.openID!,\n    item.roomID,\n  );\n\n  const condIcon = conditionMatch(condition.icons!, item);\n  const backgroundColor = getBackgroundColor(item, condition, condIcon);\n\n  const getAdditionalText = () => {\n    let additionalText = '';\n    if (condition.withVote) {\n      additionalText = `${numberFormat(item.score!)} 票 / ${numberFormat(\n        item.meta.amount!,\n      )}分`;\n    }\n\n    if (condition.withBonus) {\n      additionalText = `${numberFormat(item.score!)} 響叮噹 / ${numberFormat(\n        item.meta.amount!,\n      )}分`;\n    }\n\n    if (condition.withTotalScore) {\n      additionalText = `${numberFormat(item.score!)} ( ${numberFormat(\n        item.meta.vote! || 0,\n      )} + ${numberFormat(item.meta.gift! || 0)} ) 總積分`;\n    }\n\n    return additionalText;\n  };\n\n  return (\n    <WrapLeaderboardItem\n      withButton={condition.missions && condition.missions.length > 0 } \n    >\n      <LeaderboardItem\n        handleClickAvatar={handleClickItem}\n        isLive={item.roomID && item.roomID > 0}\n        theme={{\n          colorNickName: '#ffffff',\n          color: '#ffec17',\n          colorRankNumber: '#ffec17',\n          borderBottom: images.borderLine,\n          background: backgroundColor,\n        }}\n        {...item}\n        icon={condIcon ? condIcon.icon : ''}\n        unit={translation.get('UNIT')}\n        additionalText={getAdditionalText()}\n        isHighlight\n        withBonus={false}\n        withVote={false}\n      />\n      {showPanel && (\n        <MissionPanel\n          condition={condition}\n          userID={item.userID}\n          meta={item.meta}\n        /> \n      )}\n     \n    </WrapLeaderboardItem>\n  );\n});\n\n\n\nconst Leaderboard: React.FC<{\n  leaderboardData: LeaderboardItemInterface[];\n  condition: ConditionInterface;\n}> = ({ leaderboardData, condition }) => {\n  let panelSize = 98;\n  if (condition.missions && condition.missions.length > 0) {\n    panelSize = condition.missions.length * 88 + 20;\n  }\n\n\n  return (\n    <FrameBorder title={''}>\n      <LeaderboardGeneral\n        itemHeight={78}\n        panelSize={panelSize}\n        leaderboardData={leaderboardData}\n        withMissions={condition.missions && condition.missions.length > 0}\n        withBonus={condition.withBonus}\n        render={(item: LeaderboardItemInterface, showPanel: boolean ) => {\n          return (\n            <RenderLeaderboardItem\n              item={item}\n              condition={condition}\n              showPanel={showPanel}\n            />\n          );\n        }}\n      />\n    </FrameBorder>\n  );\n};\n\nexport default memo(Leaderboard);\n\n\n\n// 2008-tw-momo\n// import React, { useContext, memo } from 'react';\n\n// import { LeaderboardItem } from '@vmo/ui';\n// import { conditionMatch, numberFormat } from '@vmo/share/utils';\n// import { useDeepLink } from '@vmo/ui/hooks';\n// import { LeaderboardItem as LeaderboardItemInterface } from '@vmo/share/interfaces/LeaderboardItem';\n// import { TranslationContext } from '@vmo/web/context/translationContext';\n\n// import { ConditionInterface } from '../../constants/conditions';\n// import images from '../../themes/images';\n// import LeaderboardGeneral from './LeaderboardGeneral';\n// import { WrapLeaderboardItem } from './style';\n// import BonusPanel from './BonusPanel';\n// import FrameBorder from '../frameBorder';\n\n// const RenderLeaderboardItem: React.FC<{\n//   item: LeaderboardItemInterface;\n//   condition: ConditionInterface;\n//   showPanel: boolean;\n// }> = memo(({ item, condition, showPanel }) => {\n//   const translation = useContext(TranslationContext);\n//   const { handleClickItem } = useDeepLink(\n//     item.userID!,\n//     item.openID!,\n//     item.roomID,\n//   );\n//   const condIcon = conditionMatch(condition.icons!, item);\n//   const condBg = conditionMatch(condition.bgs!, item);\n\n//   return (\n//     <WrapLeaderboardItem\n//       withButton={condition.missions && condition.missions.length > 0}\n//     >\n//       <LeaderboardItem\n//         handleClickAvatar={handleClickItem}\n//         isLive={item.roomID && item.roomID > 0}\n//         theme={{\n//           colorNickName: '#ffffff',\n//           color: '#ce9914',\n//           colorRankNumber: '#ffffff',\n//           borderBottom: images.borderLine,\n//           background: condBg || 'rgba(9, 0, 59, 0.92);',\n//         }}\n//         {...item}\n//         icon={condIcon ? condIcon.icon : ''}\n//         unit={translation.get('UNIT')}\n//         isHighlight\n//         withBonus={condition.withBonus}\n//         withVote={false}\n//         bonus={Number.parseInt(item.meta.total, 10) || 0}\n//       />\n//       {showPanel && <BonusPanel meta={item.meta} />}\n//     </WrapLeaderboardItem>\n//   );\n// });\n\n// const Leaderboard: React.FC<{\n//   leaderboardData: LeaderboardItemInterface[];\n//   condition: ConditionInterface;\n// }> = ({ leaderboardData, condition }) => {\n//   const panelSize = 120;\n\n//   return (\n//     <FrameBorder title={''}>\n//       <LeaderboardGeneral\n//         itemHeight={90}\n//         panelSize={panelSize}\n//         leaderboardData={leaderboardData}\n//         withPanel={condition.withBnous}\n//         render={(item: LeaderboardItemInterface, showPanel: boolean) => {\n//           return (\n//             <RenderLeaderboardItem\n//               item={item}\n//               condition={condition}\n//               showPanel={showPanel}\n//             />\n//           );\n//         }}\n//       />\n//     </FrameBorder>\n//   );\n// };\n\n// export default memo(Leaderboard);"]},"metadata":{},"sourceType":"module"}