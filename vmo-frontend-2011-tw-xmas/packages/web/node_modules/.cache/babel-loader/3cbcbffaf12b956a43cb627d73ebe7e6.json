{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Number$parseInt from \"@babel/runtime-corejs2/core-js/number/parse-int\";\nvar _jsxFileName = \"D:\\\\17\\u5C08\\u6848\\\\\\u5BA2\\u88FD\\u5316ui\\u5C08\\u6848\\\\2011-tw-xmas chris\\\\vmo-frontend-2011-tw-xmas\\\\packages\\\\web\\\\components\\\\leaderboard\\\\LeaderboardItem.tsx\";\n// 2008-tw-momo\nimport React, { useContext, memo } from 'react';\nimport { LeaderboardItem } from '@vmo/ui';\nimport { conditionMatch } from '@vmo/share/utils';\nimport { useDeepLink } from '@vmo/ui/hooks';\nimport { TranslationContext } from '@vmo/web/context/translationContext';\nimport images from '../../themes/images';\nimport LeaderboardGeneral from './LeaderboardGeneral';\nimport { WrapLeaderboardItem } from './style';\nimport BonusPanel from './BonusPanel';\nimport FrameBorder from '../frameBorder';\nconst RenderLeaderboardItem = memo(({\n  item,\n  condition,\n  showPanel\n}) => {\n  const translation = useContext(TranslationContext);\n  const {\n    handleClickItem\n  } = useDeepLink(item.userID, item.openID, item.roomID);\n  const condIcon = conditionMatch(condition.icons, item);\n  const condBg = conditionMatch(condition.bgs, item);\n  return /*#__PURE__*/React.createElement(WrapLeaderboardItem, {\n    withButton: condition.missions && condition.missions.length > 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LeaderboardItem, _extends({\n    handleClickAvatar: handleClickItem,\n    isLive: item.roomID && item.roomID > 0,\n    theme: {\n      colorNickName: '#ffffff',\n      color: '#ce9914',\n      colorRankNumber: '#ffffff',\n      borderBottom: images.borderLine,\n      background: condBg || 'rgba(9, 0, 59, 0.92);'\n    }\n  }, item, {\n    icon: condIcon ? condIcon.icon : '',\n    unit: translation.get('UNIT'),\n    isHighlight: true,\n    withBonus: condition.withBonus,\n    withVote: false,\n    bonus: _Number$parseInt(item.meta.total, 10) || 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  })), showPanel && /*#__PURE__*/React.createElement(BonusPanel, {\n    meta: item.meta,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }));\n});\n\nconst Leaderboard = ({\n  leaderboardData,\n  condition\n}) => {\n  const panelSize = 120;\n  return /*#__PURE__*/React.createElement(FrameBorder, {\n    title: '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LeaderboardGeneral, {\n    itemHeight: 90,\n    panelSize: panelSize,\n    leaderboardData: leaderboardData,\n    withPanel: condition.withBonus,\n    render: (item, showPanel) => {\n      return /*#__PURE__*/React.createElement(RenderLeaderboardItem, {\n        item: item,\n        condition: condition,\n        showPanel: showPanel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default memo(Leaderboard); // import React, { useContext, memo } from 'react';\n// import { LeaderboardItem } from '@vmo/ui';\n// import { conditionMatch, numberFormat } from '@vmo/share/utils';\n// import { useDeepLink } from '@vmo/ui/hooks';\n// import { LeaderboardItem as LeaderboardItemInterface } from '@vmo/share/interfaces/LeaderboardItem';\n// import { TranslationContext } from '@vmo/web/context/translationContext';\n// import { ConditionInterface } from '../../constants/conditions';\n// import images from '../../themes/images';\n// import LeaderboardGeneral from './LeaderboardGeneral';\n// import { WrapLeaderboardItem } from './style';\n// import MissionPanel from './MissionPanel';\n// import FrameBorder from '../frameBorder';\n// const getBackgroundColor = (item, condition, condIcon) => {\n//   let backgroundColor = '#070027';\n//   if (condIcon && condIcon.icon) {\n//     backgroundColor =  'rgba(9, 0, 59, 0.92)';\n//   }\n//   if (condition && condition.bgs) {\n//     const condBg = conditionMatch(condition.bgs!, item);\n//     backgroundColor =\n//       condBg && condBg.color\n//         ? condBg.color\n//         :  'rgba(9, 0, 59, 0.92)';\n//   }\n//   return backgroundColor;\n// };\n// const RenderLeaderboardItem: React.FC<{\n//   item: LeaderboardItemInterface;\n//   condition: ConditionInterface;\n//   showPanel: boolean;\n// }> = memo(({ item, condition, showPanel }) => {\n//   const translation = useContext(TranslationContext);\n//   const { handleClickItem } = useDeepLink(\n//     item.userID!,\n//     item.openID!,\n//     item.roomID,\n//   );\n//   const condIcon = conditionMatch(condition.icons!, item);\n//   const backgroundColor = getBackgroundColor(item, condition, condIcon);\n//   const getAdditionalText = () => {\n//     let additionalText = '';\n//     if (condition.withVote) {\n//       additionalText = `${numberFormat(item.score!)} 票 / ${numberFormat(\n//         item.meta.amount!,\n//       )}分`;\n//     }\n//     if (condition.withBonus) {\n//       additionalText = `${numberFormat(item.score!)} 響叮噹 / ${numberFormat(\n//         item.meta.amount!,\n//       )}分`;\n//     }\n//     if (condition.withTotalScore) {\n//       additionalText = `${numberFormat(item.score!)} ( ${numberFormat(\n//         item.meta.vote! || 0,\n//       )} + ${numberFormat(item.meta.gift! || 0)} ) 總積分`;\n//     }\n//     return additionalText;\n//   };\n//   return (\n//     <WrapLeaderboardItem\n//       withButton={condition.missions && condition.missions.length > 0}\n//     >\n//       <LeaderboardItem\n//         handleClickAvatar={handleClickItem}\n//         isLive={item.roomID && item.roomID > 0}\n//         theme={{\n//           colorNickName: '#ffffff',\n//           color: '#ffec17',\n//           colorRankNumber: '#ffec17',\n//           borderBottom: images.borderLine,\n//           background: backgroundColor,\n//         }}\n//         {...item}\n//         icon={condIcon ? condIcon.icon : ''}\n//         unit={translation.get('UNIT')}\n//         additionalText={getAdditionalText()}\n//         isHighlight\n//         withBonus={false}\n//         withVote={false}\n//       />\n//       {showPanel && (\n//         <MissionPanel\n//           condition={condition}\n//           userID={item.userID}\n//           meta={item.meta}\n//         />\n//       )}\n//     </WrapLeaderboardItem>\n//   );\n// });\n// const Leaderboard: React.FC<{\n//   leaderboardData: LeaderboardItemInterface[];\n//   condition: ConditionInterface;\n// }> = ({ leaderboardData, condition }) => {\n//   let panelSize = 84;\n//   if (condition.missions && condition.missions.length > 0) {\n//     panelSize = condition.missions.length * 84 + 20;\n//   }\n//   return (\n//     <FrameBorder title={''}>\n//       <LeaderboardGeneral\n//         itemHeight={78}\n//         panelSize={panelSize}\n//         leaderboardData={leaderboardData}\n//         withMissions={condition.missions && condition.missions.length > 0}\n//         render={(item: LeaderboardItemInterface, showPanel: boolean) => {\n//           return (\n//             <RenderLeaderboardItem\n//               item={item}\n//               condition={condition}\n//               showPanel={showPanel}\n//             />\n//           );\n//         }}\n//       />\n//     </FrameBorder>\n//   );\n// };\n// export default memo(Leaderboard);","map":{"version":3,"sources":["D:/17專案/客製化ui專案/2011-tw-xmas chris/vmo-frontend-2011-tw-xmas/packages/web/components/leaderboard/LeaderboardItem.tsx"],"names":["React","useContext","memo","LeaderboardItem","conditionMatch","useDeepLink","TranslationContext","images","LeaderboardGeneral","WrapLeaderboardItem","BonusPanel","FrameBorder","RenderLeaderboardItem","item","condition","showPanel","translation","handleClickItem","userID","openID","roomID","condIcon","icons","condBg","bgs","missions","length","colorNickName","color","colorRankNumber","borderBottom","borderLine","background","icon","get","withBonus","meta","total","Leaderboard","leaderboardData","panelSize"],"mappings":"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":["// 2008-tw-momo\nimport React, { useContext, memo } from 'react';\n\nimport { LeaderboardItem } from '@vmo/ui';\nimport { conditionMatch, numberFormat } from '@vmo/share/utils';\nimport { useDeepLink } from '@vmo/ui/hooks';\nimport { LeaderboardItem as LeaderboardItemInterface } from '@vmo/share/interfaces/LeaderboardItem';\nimport { TranslationContext } from '@vmo/web/context/translationContext';\n\nimport { ConditionInterface } from '../../constants/conditions';\nimport images from '../../themes/images';\nimport LeaderboardGeneral from './LeaderboardGeneral';\nimport { WrapLeaderboardItem } from './style';\nimport BonusPanel from './BonusPanel';\nimport FrameBorder from '../frameBorder';\n\nconst RenderLeaderboardItem: React.FC<{\n  item: LeaderboardItemInterface;\n  condition: ConditionInterface;\n  showPanel: boolean;\n}> = memo(({ item, condition, showPanel }) => {\n  const translation = useContext(TranslationContext);\n  const { handleClickItem } = useDeepLink(\n    item.userID!,\n    item.openID!,\n    item.roomID,\n  );\n  const condIcon = conditionMatch(condition.icons!, item);\n  const condBg = conditionMatch(condition.bgs!, item);\n\n  return (\n    <WrapLeaderboardItem\n      withButton={condition.missions && condition.missions.length > 0}\n    >\n      <LeaderboardItem\n        handleClickAvatar={handleClickItem}\n        isLive={item.roomID && item.roomID > 0}\n        theme={{\n          colorNickName: '#ffffff',\n          color: '#ce9914',\n          colorRankNumber: '#ffffff',\n          borderBottom: images.borderLine,\n          background: condBg || 'rgba(9, 0, 59, 0.92);',\n        }}\n        {...item}\n        icon={condIcon ? condIcon.icon : ''}\n        unit={translation.get('UNIT')}\n        isHighlight\n        withBonus={condition.withBonus}\n        withVote={false}\n        bonus={Number.parseInt(item.meta.total, 10) || 0}\n      />\n      {showPanel && <BonusPanel meta={item.meta} />}\n    </WrapLeaderboardItem>\n  );\n});\n\nconst Leaderboard: React.FC<{\n  leaderboardData: LeaderboardItemInterface[];\n  condition: ConditionInterface;\n}> = ({ leaderboardData, condition }) => {\n  const panelSize = 120;\n\n  return (\n    <FrameBorder title={''}>\n      <LeaderboardGeneral\n        itemHeight={90}\n        panelSize={panelSize}\n        leaderboardData={leaderboardData}\n        withPanel={condition.withBonus}\n        render={(item: LeaderboardItemInterface, showPanel: boolean) => {\n          return (\n            <RenderLeaderboardItem\n              item={item}\n              condition={condition}\n              showPanel={showPanel}\n            />\n          );\n        }}\n      />\n    </FrameBorder>\n  );\n};\n\nexport default memo(Leaderboard);\n// import React, { useContext, memo } from 'react';\n\n// import { LeaderboardItem } from '@vmo/ui';\n// import { conditionMatch, numberFormat } from '@vmo/share/utils';\n// import { useDeepLink } from '@vmo/ui/hooks';\n// import { LeaderboardItem as LeaderboardItemInterface } from '@vmo/share/interfaces/LeaderboardItem';\n// import { TranslationContext } from '@vmo/web/context/translationContext';\n\n// import { ConditionInterface } from '../../constants/conditions';\n// import images from '../../themes/images';\n// import LeaderboardGeneral from './LeaderboardGeneral';\n// import { WrapLeaderboardItem } from './style';\n// import MissionPanel from './MissionPanel';\n// import FrameBorder from '../frameBorder';\n\n// const getBackgroundColor = (item, condition, condIcon) => {\n//   let backgroundColor = '#070027';\n//   if (condIcon && condIcon.icon) {\n//     backgroundColor =  'rgba(9, 0, 59, 0.92)';\n//   }\n//   if (condition && condition.bgs) {\n//     const condBg = conditionMatch(condition.bgs!, item);\n//     backgroundColor =\n//       condBg && condBg.color\n//         ? condBg.color\n//         :  'rgba(9, 0, 59, 0.92)';\n//   }\n\n//   return backgroundColor;\n// };\n\n// const RenderLeaderboardItem: React.FC<{\n//   item: LeaderboardItemInterface;\n//   condition: ConditionInterface;\n//   showPanel: boolean;\n// }> = memo(({ item, condition, showPanel }) => {\n//   const translation = useContext(TranslationContext);\n//   const { handleClickItem } = useDeepLink(\n//     item.userID!,\n//     item.openID!,\n//     item.roomID,\n//   );\n\n//   const condIcon = conditionMatch(condition.icons!, item);\n//   const backgroundColor = getBackgroundColor(item, condition, condIcon);\n\n//   const getAdditionalText = () => {\n//     let additionalText = '';\n//     if (condition.withVote) {\n//       additionalText = `${numberFormat(item.score!)} 票 / ${numberFormat(\n//         item.meta.amount!,\n//       )}分`;\n//     }\n\n//     if (condition.withBonus) {\n//       additionalText = `${numberFormat(item.score!)} 響叮噹 / ${numberFormat(\n//         item.meta.amount!,\n//       )}分`;\n//     }\n\n//     if (condition.withTotalScore) {\n//       additionalText = `${numberFormat(item.score!)} ( ${numberFormat(\n//         item.meta.vote! || 0,\n//       )} + ${numberFormat(item.meta.gift! || 0)} ) 總積分`;\n//     }\n\n//     return additionalText;\n//   };\n\n//   return (\n//     <WrapLeaderboardItem\n//       withButton={condition.missions && condition.missions.length > 0}\n//     >\n//       <LeaderboardItem\n//         handleClickAvatar={handleClickItem}\n//         isLive={item.roomID && item.roomID > 0}\n//         theme={{\n//           colorNickName: '#ffffff',\n//           color: '#ffec17',\n//           colorRankNumber: '#ffec17',\n//           borderBottom: images.borderLine,\n//           background: backgroundColor,\n//         }}\n//         {...item}\n//         icon={condIcon ? condIcon.icon : ''}\n//         unit={translation.get('UNIT')}\n//         additionalText={getAdditionalText()}\n//         isHighlight\n//         withBonus={false}\n//         withVote={false}\n//       />\n//       {showPanel && (\n//         <MissionPanel\n//           condition={condition}\n//           userID={item.userID}\n//           meta={item.meta}\n//         />\n//       )}\n//     </WrapLeaderboardItem>\n//   );\n// });\n\n// const Leaderboard: React.FC<{\n//   leaderboardData: LeaderboardItemInterface[];\n//   condition: ConditionInterface;\n// }> = ({ leaderboardData, condition }) => {\n//   let panelSize = 84;\n//   if (condition.missions && condition.missions.length > 0) {\n//     panelSize = condition.missions.length * 84 + 20;\n//   }\n\n//   return (\n//     <FrameBorder title={''}>\n//       <LeaderboardGeneral\n//         itemHeight={78}\n//         panelSize={panelSize}\n//         leaderboardData={leaderboardData}\n//         withMissions={condition.missions && condition.missions.length > 0}\n//         render={(item: LeaderboardItemInterface, showPanel: boolean) => {\n//           return (\n//             <RenderLeaderboardItem\n//               item={item}\n//               condition={condition}\n//               showPanel={showPanel}\n//             />\n//           );\n//         }}\n//       />\n//     </FrameBorder>\n//   );\n// };\n\n// export default memo(Leaderboard);\n"]},"metadata":{},"sourceType":"module"}