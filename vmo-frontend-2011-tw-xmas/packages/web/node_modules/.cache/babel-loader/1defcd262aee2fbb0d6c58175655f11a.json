{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n// import { now } from '@17media/dad';\n// import { conditionMatch } from '@vmo/share/utils';\n// import { LeaderboardItem as LeaderboardItemInterface } from '@vmo/share/interfaces/LeaderboardItem';\n// const sortTab200Amount = [\n//   {\n//     filterCondition: '<',\n//     value: 31,\n//     conditionValue: 'rank',\n//     amount: 0,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 2,\n//     conditionValue: 'rank',\n//     amount: 60,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 3,\n//     conditionValue: 'rank',\n//     amount: 55,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 4,\n//     conditionValue: 'rank',\n//     amount: 50,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 5,\n//     conditionValue: 'rank',\n//     amount: 45,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 6,\n//     conditionValue: 'rank',\n//     amount: 44,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 7,\n//     conditionValue: 'rank',\n//     amount: 43,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 8,\n//     conditionValue: 'rank',\n//     amount: 42,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 9,\n//     conditionValue: 'rank',\n//     amount: 41,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 10,\n//     conditionValue: 'rank',\n//     amount: 40,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 11,\n//     conditionValue: 'rank',\n//     amount: 39,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 12,\n//     conditionValue: 'rank',\n//     amount: 38,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 13,\n//     conditionValue: 'rank',\n//     amount: 37,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 14,\n//     conditionValue: 'rank',\n//     amount: 36,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 15,\n//     conditionValue: 'rank',\n//     amount: 35,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 16,\n//     conditionValue: 'rank',\n//     amount: 34,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 17,\n//     conditionValue: 'rank',\n//     amount: 33,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 18,\n//     conditionValue: 'rank',\n//     amount: 32,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 19,\n//     conditionValue: 'rank',\n//     amount: 31,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 20,\n//     conditionValue: 'rank',\n//     amount: 30,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 21,\n//     conditionValue: 'rank',\n//     amount: 29,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 22,\n//     conditionValue: 'rank',\n//     amount: 28,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 23,\n//     conditionValue: 'rank',\n//     amount: 27,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 24,\n//     conditionValue: 'rank',\n//     amount: 26,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 25,\n//     conditionValue: 'rank',\n//     amount: 25,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 26,\n//     conditionValue: 'rank',\n//     amount: 24,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 27,\n//     conditionValue: 'rank',\n//     amount: 23,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 28,\n//     conditionValue: 'rank',\n//     amount: 22,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 29,\n//     conditionValue: 'rank',\n//     amount: 21,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 30,\n//     conditionValue: 'rank',\n//     amount: 20,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 31,\n//     conditionValue: 'rank',\n//     amount: 19,\n//   },\n// ];\n// const sortTab210Amount = [\n//   {\n//     filterCondition: '<',\n//     value: 31,\n//     conditionValue: 'rank',\n//     amount: 0,\n//   },\n//   {\n//     filterCondition: '<',\n//     value: 28,\n//     conditionValue: 'rank',\n//     amount: 1,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 2,\n//     conditionValue: 'rank',\n//     amount: 40,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 3,\n//     conditionValue: 'rank',\n//     amount: 35,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 4,\n//     conditionValue: 'rank',\n//     amount: 30,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 5,\n//     conditionValue: 'rank',\n//     amount: 25,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 6,\n//     conditionValue: 'rank',\n//     amount: 24,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 7,\n//     conditionValue: 'rank',\n//     amount: 23,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 8,\n//     conditionValue: 'rank',\n//     amount: 22,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 9,\n//     conditionValue: 'rank',\n//     amount: 21,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 10,\n//     conditionValue: 'rank',\n//     amount: 20,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 11,\n//     conditionValue: 'rank',\n//     amount: 19,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 12,\n//     conditionValue: 'rank',\n//     amount: 18,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 13,\n//     conditionValue: 'rank',\n//     amount: 17,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 14,\n//     conditionValue: 'rank',\n//     amount: 16,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 15,\n//     conditionValue: 'rank',\n//     amount: 15,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 16,\n//     conditionValue: 'rank',\n//     amount: 14,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 17,\n//     conditionValue: 'rank',\n//     amount: 13,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 18,\n//     conditionValue: 'rank',\n//     amount: 12,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 19,\n//     conditionValue: 'rank',\n//     amount: 11,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 20,\n//     conditionValue: 'rank',\n//     amount: 10,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 21,\n//     conditionValue: 'rank',\n//     amount: 9,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 22,\n//     conditionValue: 'rank',\n//     amount: 8,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 23,\n//     conditionValue: 'rank',\n//     amount: 7,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 24,\n//     conditionValue: 'rank',\n//     amount: 6,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 25,\n//     conditionValue: 'rank',\n//     amount: 5,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 26,\n//     conditionValue: 'rank',\n//     amount: 4,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 27,\n//     conditionValue: 'rank',\n//     amount: 3,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 28,\n//     conditionValue: 'rank',\n//     amount: 2,\n//   },\n// ];\n// export const sortTab00 = (data: any) => {\n//   if (data && data.length && data[0]) {\n//     const newData = data[0].map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         amount,\n//         lastTimestamp,\n//         avatar,\n//         name,\n//         userInfo,\n//         meta,\n//       } = item;\n//       return {\n//         type,\n//         userID: userInfo.userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: score || 0,\n//         userInfo,\n//         meta: {\n//           ...meta,\n//         },\n//         roomID: userInfo.onliveInfo\n//           ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//           : 0,\n//       };\n//     });\n//     return newData;\n//   }\n//   return [];\n// };\n// export const sortTab10 = sortTab00;\n// export const sortTab200 = (data: any) => {\n//   if (data && data[0]) {\n//     const newData = data[0].map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         lastTimestamp,\n//         avatar,\n//         name,\n//         userInfo,\n//         meta,\n//       } = item;\n//       const amountItem = conditionMatch(sortTab200Amount, item);\n//       return {\n//         type,\n//         userID: userInfo.userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: score || 0,\n//         userInfo,\n//         meta: {\n//           ...meta,\n//           amount: amountItem.amount,\n//         },\n//         roomID: userInfo.onliveInfo\n//           ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//           : 0,\n//       };\n//     });\n//     return newData;\n//   }\n//   return [];\n// };\n// export const sortTab210 = (data: any) => {\n//   if (data && data[0]) {\n//     const newData = data[0].map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         lastTimestamp,\n//         avatar,\n//         name,\n//         userInfo,\n//         meta,\n//       } = item;\n//       const amountItem = conditionMatch(sortTab210Amount, item);\n//       return {\n//         type,\n//         userID: userInfo.userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: score || 0,\n//         userInfo,\n//         meta: {\n//           ...meta,\n//           amount: amountItem.amount,\n//         },\n//         roomID: userInfo.onliveInfo\n//           ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//           : 0,\n//       };\n//     });\n//     return newData;\n//   }\n//   return [];\n// };\n// export const sortTab40 = (data: any) => {\n//   if (data && data[0]) {\n//     const newData = data[0].map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         lastTimestamp,\n//         avatar,\n//         name,\n//         userInfo,\n//         meta,\n//       } = item;\n//       let findMeta = {\n//         s2: 0,\n//         s5: 0,\n//         r1: 0,\n//         r2: 0,\n//       };\n//       if (data[1]) {\n//         const findItem = data[1].find(\n//           f => f.userInfo.userID === userInfo.userID,\n//         );\n//         if (findItem) {\n//           findMeta = findItem.meta;\n//         }\n//       }\n//       return {\n//         type,\n//         userID: userInfo.userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: score || 0,\n//         userInfo,\n//         meta: {\n//           ...meta,\n//           ...findMeta,\n//         },\n//         roomID: userInfo.onliveInfo\n//           ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//           : 0,\n//       };\n//     });\n//     return newData;\n//   }\n//   return [];\n// };\n// export const sortTab410 = sortTab40;\n// export const sortTab0330 = (data: any) => {\n//   if (data && data.length && data[0] && data[0].streamers) {\n//     const newData = data[0].streamers.map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         amount,\n//         lastTimestamp,\n//         picture,\n//         name,\n//         userInfo,\n//         meta,\n//       } = item;\n//       let finalScore = score;\n//       if (meta && meta.bonus) {\n//         finalScore = parseInt(finalScore + meta.bonus, 10);\n//       }\n//       return {\n//         type,\n//         userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: finalScore || 0,\n//         meta: {\n//           ...meta,\n//         },\n//         userInfo: {\n//           userID,\n//           displayName: name,\n//           picture,\n//         },\n//         roomID:\n//           userInfo && userInfo.onliveInfo\n//             ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//             : 0,\n//       };\n//     });\n//     const finalData = newData\n//       .sort((a, b) => b.score - a.score)\n//       .map((s, i) => ({\n//         ...s,\n//         rank: i,\n//       }));\n//     return finalData;\n//   }\n//   return [];\n// };\n// export const sortTab0331 = (data: any) => {\n//   let startTimeCheck = 0;\n//   let votedList = [];\n//   if (data[1]) {\n//     startTimeCheck = data[1].startTime;\n//   }\n//   if (data[2] && data[2].votedTo) {\n//     votedList = data[2].votedTo;\n//   }\n//   if (data && data.length && data[0] && data[0].streamers) {\n//     const newData = data[0].streamers.map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         amount,\n//         lastTimestamp,\n//         picture,\n//         name,\n//         userInfo,\n//         meta,\n//       } = item;\n//       let voteInfo = {};\n//       const nowTime = now();\n//       if (startTimeCheck > 0 && nowTime >= startTimeCheck) {\n//         voteInfo = {\n//           status: true,\n//         };\n//         if (votedList && votedList.length > 0) {\n//           voteInfo = {\n//             status: !votedList.includes(userInfo.userID),\n//           };\n//         }\n//       }\n//       return {\n//         type,\n//         userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: score || 0,\n//         userInfo: {\n//           userID,\n//           displayName: name,\n//           picture,\n//         },\n//         meta: {\n//           ...meta,\n//         },\n//         voteInfo,\n//         roomID:\n//           userInfo && userInfo.onliveInfo\n//             ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//             : 0,\n//       };\n//     });\n//     return newData;\n//   }\n//   return [];\n// };\n// export const sortTabCache = (data: any) => {\n//   if (data && data.length && data[0] && data[0].streamers) {\n//     const newData = data[0].streamers.map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         amount,\n//         lastTimestamp,\n//         picture,\n//         name,\n//         meta,\n//         bonus,\n//         userInfo,\n//       } = item;\n//       return {\n//         type,\n//         userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: score || 0,\n//         meta: {\n//           bonus: bonus || 0,\n//           ...meta,\n//         },\n//         userInfo: {\n//           userID,\n//           displayName: name,\n//           picture,\n//         },\n//         roomID:\n//           userInfo && userInfo.onliveInfo\n//             ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//             : 0,\n//       };\n//     });\n//     return newData;\n//   }\n//   return [];\n// };\nexport const sortTab00 = data => {\n  if (data && data.length && data[0]) {\n    const newData = data[0].map((item, index) => {\n      const {\n        type,\n        userID,\n        score,\n        amount,\n        lastTimestamp,\n        avatar,\n        name,\n        userInfo,\n        meta\n      } = item;\n      return {\n        type,\n        userID: userInfo.userID,\n        lastTimestamp,\n        rank: index,\n        score: score || 0,\n        userInfo,\n        meta: _objectSpread({}, meta) // roomID: userInfo.onliveInfo\n        //   ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n        //   : 0,\n\n      };\n    });\n    return newData;\n  }\n\n  return [];\n};\nexport const sortTab100 = (data, team) => {\n  if (data && data.length) {\n    const [sockData, candyData, gingerData] = data;\n    let selectData = [];\n\n    switch (team) {\n      case 'ginger':\n        {\n          selectData = gingerData || [];\n          break;\n        }\n\n      case 'candy':\n        {\n          selectData = candyData || [];\n          break;\n        }\n\n      case 'sock':\n      default:\n        {\n          selectData = sockData || [];\n        }\n    } // total scores\n\n\n    let sockScores = 0;\n    let candyScores = 0;\n    let gingerScores = 0; // socks\n\n    if (sockData && sockData.length > 0) {\n      sockData.forEach(item => {\n        sockScores += item.score || 0;\n      });\n    } // candycane\n\n\n    if (candyData && candyData.length > 0) {\n      candyData.forEach(item => {\n        candyScores += item.score || 0;\n      });\n    } // gingerman\n\n\n    if (gingerData && gingerData.length > 0) {\n      gingerData.forEach(item => {\n        gingerScores += item.score || 0;\n      });\n    }\n\n    const newData = selectData.map((item, index) => {\n      const {\n        type,\n        userID,\n        score,\n        amount,\n        lastTimestamp,\n        avatar,\n        name,\n        userInfo,\n        meta\n      } = item;\n      return {\n        type,\n        userID: userInfo.userID,\n        lastTimestamp,\n        rank: index,\n        score: score || 0,\n        userInfo,\n        meta: _objectSpread({}, meta) // roomID: userInfo.onliveInfo\n        //   ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n        //   : 0,\n\n      };\n    });\n    return {\n      data: newData,\n      scores: {\n        sock: sockScores,\n        candy: candyScores,\n        ginger: gingerScores\n      }\n    };\n  }\n\n  return {\n    scores: {\n      sock: 0,\n      candy: 0,\n      ginger: 0\n    },\n    data: []\n  };\n};\nexport const sortTab200 = (data, team) => {\n  if (data && data.length) {\n    const [sockData, candyData, gingerData] = data;\n    let selectData = [];\n\n    switch (team) {\n      case 'ginger':\n        {\n          selectData = gingerData || [];\n          break;\n        }\n\n      case 'candy':\n        {\n          selectData = candyData || [];\n          break;\n        }\n\n      case 'sock':\n      default:\n        {\n          selectData = sockData || [];\n        }\n    } // total scores\n\n\n    let sockScores = 0;\n    let candyScores = 0;\n    let gingerScores = 0; // socks\n\n    if (sockData && sockData.length > 0) {\n      sockData.forEach(item => {\n        sockScores += item.score || 0;\n      });\n    } // candycane\n\n\n    if (candyData && candyData.length > 0) {\n      candyData.forEach(item => {\n        candyScores += item.score || 0;\n      });\n    } // gingerman\n\n\n    if (gingerData && gingerData.length > 0) {\n      gingerData.forEach(item => {\n        gingerScores += item.score || 0;\n      });\n    }\n\n    const newData = selectData.map((item, index) => {\n      const {\n        type,\n        userID,\n        score,\n        amount,\n        lastTimestamp,\n        avatar,\n        name,\n        userInfo,\n        meta\n      } = item;\n      return {\n        type,\n        userID: userInfo.userID,\n        lastTimestamp,\n        rank: index,\n        score: score || 0,\n        userInfo,\n        meta: _objectSpread({}, meta) // roomID: userInfo.onliveInfo\n        //   ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n        //   : 0,\n\n      };\n    });\n    return {\n      data: newData,\n      scores: {\n        sock: sockScores,\n        candy: candyScores,\n        ginger: gingerScores\n      }\n    };\n  }\n\n  return {\n    scores: {\n      sock: 0,\n      candy: 0,\n      ginger: 0\n    },\n    data: []\n  };\n};\nexport const sortTab210 = (data, team) => {\n  if (data && data.length) {\n    const [sockData, candyData, gingerData] = data;\n    let selectData = [];\n\n    switch (team) {\n      case 'ginger':\n        {\n          selectData = gingerData || [];\n          break;\n        }\n\n      case 'candy':\n        {\n          selectData = candyData || [];\n          break;\n        }\n\n      case 'sock':\n      default:\n        {\n          selectData = sockData || [];\n        }\n    } // total scores\n\n\n    let sockScores = 0;\n    let candyScores = 0;\n    let gingerScores = 0; // socks\n\n    if (sockData && sockData.length > 0) {\n      sockData.forEach(item => {\n        sockScores += item.score || 0;\n      });\n    } // candycane\n\n\n    if (candyData && candyData.length > 0) {\n      candyData.forEach(item => {\n        candyScores += item.score || 0;\n      });\n    } // gingerman\n\n\n    if (gingerData && gingerData.length > 0) {\n      gingerData.forEach(item => {\n        gingerScores += item.score || 0;\n      });\n    }\n\n    const newData = selectData.map((item, index) => {\n      const {\n        type,\n        userID,\n        score,\n        amount,\n        lastTimestamp,\n        avatar,\n        name,\n        userInfo,\n        meta\n      } = item;\n      return {\n        type,\n        userID: userInfo.userID,\n        lastTimestamp,\n        rank: index,\n        score: score || 0,\n        userInfo,\n        meta: _objectSpread({}, meta),\n        roomID: userInfo.onliveInfo ? _parseInt(userInfo.onliveInfo.liveStreamID, 10) : 0\n      };\n    });\n    return {\n      data: newData,\n      scores: {\n        sock: sockScores,\n        candy: candyScores,\n        ginger: gingerScores\n      }\n    };\n  }\n\n  return {\n    scores: {\n      sock: 0,\n      candy: 0,\n      ginger: 0\n    },\n    data: []\n  };\n};\nexport const sortTab220 = (data, team) => {\n  if (data && data.length) {\n    const [sockData, candyData, gingerData] = data;\n    let selectData = [];\n\n    switch (team) {\n      case 'ginger':\n        {\n          selectData = gingerData || [];\n          break;\n        }\n\n      case 'candy':\n        {\n          selectData = candyData || [];\n          break;\n        }\n\n      case 'sock':\n      default:\n        {\n          selectData = sockData || [];\n        }\n    } // total scores\n\n\n    let sockScores = 0;\n    let candyScores = 0;\n    let gingerScores = 0; // socks\n\n    if (sockData && sockData.length > 0) {\n      sockData.forEach(item => {\n        sockScores += item.score || 0;\n      });\n    } // candycane\n\n\n    if (candyData && candyData.length > 0) {\n      candyData.forEach(item => {\n        candyScores += item.score || 0;\n      });\n    } // gingerman\n\n\n    if (gingerData && gingerData.length > 0) {\n      gingerData.forEach(item => {\n        gingerScores += item.score || 0;\n      });\n    }\n\n    const newData = selectData.map((item, index) => {\n      const {\n        type,\n        userID,\n        score,\n        amount,\n        lastTimestamp,\n        avatar,\n        name,\n        userInfo,\n        meta\n      } = item;\n      return {\n        type,\n        userID: userInfo.userID,\n        lastTimestamp,\n        rank: index,\n        score: score || 0,\n        userInfo,\n        meta: _objectSpread({}, meta) // roomID: userInfo.onliveInfo\n        //   ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n        //   : 0,\n\n      };\n    });\n    return {\n      data: newData,\n      scores: {\n        sock: sockScores,\n        candy: candyScores,\n        ginger: gingerScores\n      }\n    };\n  }\n\n  return {\n    scores: {\n      sock: 0,\n      candy: 0,\n      ginger: 0\n    },\n    data: []\n  };\n};\nexport const sortTab30 = data => {\n  if (data && data.length && data[0]) {\n    const newData = data[0].map((item, index) => {\n      const {\n        type,\n        userID,\n        score,\n        amount,\n        lastTimestamp,\n        avatar,\n        name,\n        userInfo,\n        meta\n      } = item;\n\n      const bonus = _objectSpread({\n        total: 0,\n        r2: 0,\n        s4: 0\n      }, meta);\n\n      return {\n        type,\n        userID: userInfo.userID,\n        lastTimestamp,\n        rank: index,\n        score: score || 0,\n        userInfo,\n        meta: _objectSpread({}, bonus, {\n          total: _parseInt(bonus.r2, 10) + _parseInt(bonus.s4, 10)\n        }) // roomID: userInfo.onliveInfo\n        //   ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n        //   : 0,\n\n      };\n    });\n    return newData;\n  }\n\n  return [];\n};","map":{"version":3,"sources":["D:/17專案/客製化ui專案/vmo-frontend-2011-tw-xmas/packages/ui/hooks/api/sort.ts"],"names":["sortTab00","data","length","newData","map","item","index","type","userID","score","amount","lastTimestamp","avatar","name","userInfo","meta","rank","sortTab100","team","sockData","candyData","gingerData","selectData","sockScores","candyScores","gingerScores","forEach","scores","sock","candy","ginger","sortTab200","sortTab210","roomID","onliveInfo","liveStreamID","sortTab220","sortTab30","bonus","total","r2","s4"],"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","sourcesContent":["// import { now } from '@17media/dad';\n\n// import { conditionMatch } from '@vmo/share/utils';\n// import { LeaderboardItem as LeaderboardItemInterface } from '@vmo/share/interfaces/LeaderboardItem';\n\n// const sortTab200Amount = [\n//   {\n//     filterCondition: '<',\n//     value: 31,\n//     conditionValue: 'rank',\n//     amount: 0,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 2,\n//     conditionValue: 'rank',\n//     amount: 60,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 3,\n//     conditionValue: 'rank',\n//     amount: 55,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 4,\n//     conditionValue: 'rank',\n//     amount: 50,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 5,\n//     conditionValue: 'rank',\n//     amount: 45,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 6,\n//     conditionValue: 'rank',\n//     amount: 44,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 7,\n//     conditionValue: 'rank',\n//     amount: 43,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 8,\n//     conditionValue: 'rank',\n//     amount: 42,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 9,\n//     conditionValue: 'rank',\n//     amount: 41,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 10,\n//     conditionValue: 'rank',\n//     amount: 40,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 11,\n//     conditionValue: 'rank',\n//     amount: 39,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 12,\n//     conditionValue: 'rank',\n//     amount: 38,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 13,\n//     conditionValue: 'rank',\n//     amount: 37,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 14,\n//     conditionValue: 'rank',\n//     amount: 36,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 15,\n//     conditionValue: 'rank',\n//     amount: 35,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 16,\n//     conditionValue: 'rank',\n//     amount: 34,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 17,\n//     conditionValue: 'rank',\n//     amount: 33,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 18,\n//     conditionValue: 'rank',\n//     amount: 32,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 19,\n//     conditionValue: 'rank',\n//     amount: 31,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 20,\n//     conditionValue: 'rank',\n//     amount: 30,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 21,\n//     conditionValue: 'rank',\n//     amount: 29,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 22,\n//     conditionValue: 'rank',\n//     amount: 28,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 23,\n//     conditionValue: 'rank',\n//     amount: 27,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 24,\n//     conditionValue: 'rank',\n//     amount: 26,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 25,\n//     conditionValue: 'rank',\n//     amount: 25,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 26,\n//     conditionValue: 'rank',\n//     amount: 24,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 27,\n//     conditionValue: 'rank',\n//     amount: 23,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 28,\n//     conditionValue: 'rank',\n//     amount: 22,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 29,\n//     conditionValue: 'rank',\n//     amount: 21,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 30,\n//     conditionValue: 'rank',\n//     amount: 20,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 31,\n//     conditionValue: 'rank',\n//     amount: 19,\n//   },\n// ];\n\n// const sortTab210Amount = [\n//   {\n//     filterCondition: '<',\n//     value: 31,\n//     conditionValue: 'rank',\n//     amount: 0,\n//   },\n//   {\n//     filterCondition: '<',\n//     value: 28,\n//     conditionValue: 'rank',\n//     amount: 1,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 2,\n//     conditionValue: 'rank',\n//     amount: 40,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 3,\n//     conditionValue: 'rank',\n//     amount: 35,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 4,\n//     conditionValue: 'rank',\n//     amount: 30,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 5,\n//     conditionValue: 'rank',\n//     amount: 25,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 6,\n//     conditionValue: 'rank',\n//     amount: 24,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 7,\n//     conditionValue: 'rank',\n//     amount: 23,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 8,\n//     conditionValue: 'rank',\n//     amount: 22,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 9,\n//     conditionValue: 'rank',\n//     amount: 21,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 10,\n//     conditionValue: 'rank',\n//     amount: 20,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 11,\n//     conditionValue: 'rank',\n//     amount: 19,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 12,\n//     conditionValue: 'rank',\n//     amount: 18,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 13,\n//     conditionValue: 'rank',\n//     amount: 17,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 14,\n//     conditionValue: 'rank',\n//     amount: 16,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 15,\n//     conditionValue: 'rank',\n//     amount: 15,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 16,\n//     conditionValue: 'rank',\n//     amount: 14,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 17,\n//     conditionValue: 'rank',\n//     amount: 13,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 18,\n//     conditionValue: 'rank',\n//     amount: 12,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 19,\n//     conditionValue: 'rank',\n//     amount: 11,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 20,\n//     conditionValue: 'rank',\n//     amount: 10,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 21,\n//     conditionValue: 'rank',\n//     amount: 9,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 22,\n//     conditionValue: 'rank',\n//     amount: 8,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 23,\n//     conditionValue: 'rank',\n//     amount: 7,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 24,\n//     conditionValue: 'rank',\n//     amount: 6,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 25,\n//     conditionValue: 'rank',\n//     amount: 5,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 26,\n//     conditionValue: 'rank',\n//     amount: 4,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 27,\n//     conditionValue: 'rank',\n//     amount: 3,\n//   },\n//   {\n//     filterCondition: '===',\n//     value: 28,\n//     conditionValue: 'rank',\n//     amount: 2,\n//   },\n// ];\n\n// export const sortTab00 = (data: any) => {\n//   if (data && data.length && data[0]) {\n//     const newData = data[0].map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         amount,\n//         lastTimestamp,\n//         avatar,\n//         name,\n//         userInfo,\n//         meta,\n//       } = item;\n//       return {\n//         type,\n//         userID: userInfo.userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: score || 0,\n//         userInfo,\n//         meta: {\n//           ...meta,\n//         },\n//         roomID: userInfo.onliveInfo\n//           ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//           : 0,\n//       };\n//     });\n//     return newData;\n//   }\n//   return [];\n// };\n\n// export const sortTab10 = sortTab00;\n\n// export const sortTab200 = (data: any) => {\n//   if (data && data[0]) {\n//     const newData = data[0].map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         lastTimestamp,\n//         avatar,\n//         name,\n//         userInfo,\n//         meta,\n//       } = item;\n//       const amountItem = conditionMatch(sortTab200Amount, item);\n//       return {\n//         type,\n//         userID: userInfo.userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: score || 0,\n//         userInfo,\n//         meta: {\n//           ...meta,\n//           amount: amountItem.amount,\n//         },\n//         roomID: userInfo.onliveInfo\n//           ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//           : 0,\n//       };\n//     });\n//     return newData;\n//   }\n//   return [];\n// };\n\n// export const sortTab210 = (data: any) => {\n//   if (data && data[0]) {\n//     const newData = data[0].map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         lastTimestamp,\n//         avatar,\n//         name,\n//         userInfo,\n//         meta,\n//       } = item;\n//       const amountItem = conditionMatch(sortTab210Amount, item);\n//       return {\n//         type,\n//         userID: userInfo.userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: score || 0,\n//         userInfo,\n//         meta: {\n//           ...meta,\n//           amount: amountItem.amount,\n//         },\n//         roomID: userInfo.onliveInfo\n//           ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//           : 0,\n//       };\n//     });\n//     return newData;\n//   }\n//   return [];\n// };\n\n// export const sortTab40 = (data: any) => {\n//   if (data && data[0]) {\n//     const newData = data[0].map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         lastTimestamp,\n//         avatar,\n//         name,\n//         userInfo,\n//         meta,\n//       } = item;\n//       let findMeta = {\n//         s2: 0,\n//         s5: 0,\n//         r1: 0,\n//         r2: 0,\n//       };\n//       if (data[1]) {\n//         const findItem = data[1].find(\n//           f => f.userInfo.userID === userInfo.userID,\n//         );\n//         if (findItem) {\n//           findMeta = findItem.meta;\n//         }\n//       }\n//       return {\n//         type,\n//         userID: userInfo.userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: score || 0,\n//         userInfo,\n//         meta: {\n//           ...meta,\n//           ...findMeta,\n//         },\n//         roomID: userInfo.onliveInfo\n//           ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//           : 0,\n//       };\n//     });\n//     return newData;\n//   }\n//   return [];\n// };\n\n// export const sortTab410 = sortTab40;\n\n// export const sortTab0330 = (data: any) => {\n//   if (data && data.length && data[0] && data[0].streamers) {\n//     const newData = data[0].streamers.map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         amount,\n//         lastTimestamp,\n//         picture,\n//         name,\n//         userInfo,\n//         meta,\n//       } = item;\n//       let finalScore = score;\n//       if (meta && meta.bonus) {\n//         finalScore = parseInt(finalScore + meta.bonus, 10);\n//       }\n//       return {\n//         type,\n//         userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: finalScore || 0,\n//         meta: {\n//           ...meta,\n//         },\n//         userInfo: {\n//           userID,\n//           displayName: name,\n//           picture,\n//         },\n//         roomID:\n//           userInfo && userInfo.onliveInfo\n//             ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//             : 0,\n//       };\n//     });\n//     const finalData = newData\n//       .sort((a, b) => b.score - a.score)\n//       .map((s, i) => ({\n//         ...s,\n//         rank: i,\n//       }));\n//     return finalData;\n//   }\n//   return [];\n// };\n\n// export const sortTab0331 = (data: any) => {\n//   let startTimeCheck = 0;\n//   let votedList = [];\n//   if (data[1]) {\n//     startTimeCheck = data[1].startTime;\n//   }\n//   if (data[2] && data[2].votedTo) {\n//     votedList = data[2].votedTo;\n//   }\n//   if (data && data.length && data[0] && data[0].streamers) {\n//     const newData = data[0].streamers.map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         amount,\n//         lastTimestamp,\n//         picture,\n//         name,\n//         userInfo,\n//         meta,\n//       } = item;\n//       let voteInfo = {};\n//       const nowTime = now();\n//       if (startTimeCheck > 0 && nowTime >= startTimeCheck) {\n//         voteInfo = {\n//           status: true,\n//         };\n//         if (votedList && votedList.length > 0) {\n//           voteInfo = {\n//             status: !votedList.includes(userInfo.userID),\n//           };\n//         }\n//       }\n//       return {\n//         type,\n//         userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: score || 0,\n//         userInfo: {\n//           userID,\n//           displayName: name,\n//           picture,\n//         },\n//         meta: {\n//           ...meta,\n//         },\n//         voteInfo,\n//         roomID:\n//           userInfo && userInfo.onliveInfo\n//             ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//             : 0,\n//       };\n//     });\n//     return newData;\n//   }\n//   return [];\n// };\n\n// export const sortTabCache = (data: any) => {\n//   if (data && data.length && data[0] && data[0].streamers) {\n//     const newData = data[0].streamers.map((item, index) => {\n//       const {\n//         type,\n//         userID,\n//         score,\n//         amount,\n//         lastTimestamp,\n//         picture,\n//         name,\n//         meta,\n//         bonus,\n//         userInfo,\n//       } = item;\n//       return {\n//         type,\n//         userID,\n//         lastTimestamp,\n//         rank: index,\n//         score: score || 0,\n//         meta: {\n//           bonus: bonus || 0,\n//           ...meta,\n//         },\n//         userInfo: {\n//           userID,\n//           displayName: name,\n//           picture,\n//         },\n//         roomID:\n//           userInfo && userInfo.onliveInfo\n//             ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n//             : 0,\n//       };\n//     });\n//     return newData;\n//   }\n//   return [];\n// };\n\nimport { now } from '@17media/dad';\n\nimport { conditionMatch } from '@vmo/share/utils';\nimport { LeaderboardItem as LeaderboardItemInterface } from '@vmo/share/interfaces/LeaderboardItem';\n\nexport const sortTab00 = (data: any) => {\n  if (data && data.length && data[0]) {\n    const newData = data[0].map((item, index) => {\n      const {\n        type,\n        userID,\n        score,\n        amount,\n        lastTimestamp,\n        avatar,\n        name,\n        userInfo,\n        meta,\n      } = item;\n      return {\n        type,\n        userID: userInfo.userID,\n        lastTimestamp,\n        rank: index,\n        score: score || 0,\n        userInfo,\n        meta: {\n          ...meta,\n        },\n        // roomID: userInfo.onliveInfo\n        //   ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n        //   : 0,\n      };\n    });\n    return newData;\n  }\n  return [];\n};\n\nexport const sortTab100 = (data: any, team: string) => {\n  if (data && data.length) {\n    const [sockData, candyData, gingerData] = data;\n    let selectData = [];\n    switch (team) {\n      case 'ginger': {\n        selectData = gingerData || [];\n        break;\n      }\n      case 'candy': {\n        selectData = candyData || [];\n        break;\n      }\n      case 'sock':\n      default: {\n        selectData = sockData || [];\n      }\n    }\n    // total scores\n    let sockScores = 0;\n    let candyScores = 0;\n    let gingerScores = 0;\n    // socks\n    if (sockData && sockData.length > 0) {\n      sockData.forEach((item: LeaderboardItemInterface) => {\n        sockScores += item.score || 0;\n      });\n    }\n     // candycane\n    if (candyData && candyData.length > 0) {\n      candyData.forEach((item: LeaderboardItemInterface) => {\n        candyScores += item.score || 0;\n      });\n    }\n     // gingerman\n    if (gingerData && gingerData.length > 0) {\n      gingerData.forEach((item: LeaderboardItemInterface) => {\n        gingerScores += item.score || 0;\n      });\n    }\n    const newData = selectData.map((item, index) => {\n      const {\n        type,\n        userID,\n        score,\n        amount,\n        lastTimestamp,\n        avatar,\n        name,\n        userInfo,\n        meta,\n      } = item;\n      return {\n        type,\n        userID: userInfo.userID,\n        lastTimestamp,\n        rank: index,\n        score: score || 0,\n        userInfo,\n        meta: {\n          ...meta,\n        },\n        // roomID: userInfo.onliveInfo\n        //   ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n        //   : 0,\n      };\n    });\n    return {\n      data: newData,\n      scores: {\n        sock: sockScores,\n        candy: candyScores,\n        ginger: gingerScores,\n      },\n    };\n  }\n  return {\n    scores: {\n      sock: 0,\n      candy: 0,\n      ginger: 0,\n    },\n    data: [],\n  };\n};\n\nexport const sortTab200 = (data: any, team: string) => {\n  if (data && data.length) {\n    const [sockData, candyData, gingerData] = data;\n    let selectData = [];\n    switch (team) {\n      case 'ginger': {\n        selectData = gingerData || [];\n        break;\n      }\n      case 'candy': {\n        selectData = candyData || [];\n        break;\n      }\n      case 'sock':\n      default: {\n        selectData = sockData || [];\n      }\n    }\n    // total scores\n    let sockScores = 0;\n    let candyScores = 0;\n    let gingerScores = 0;\n    // socks\n    if (sockData && sockData.length > 0) {\n      sockData.forEach((item: LeaderboardItemInterface) => {\n        sockScores += item.score || 0;\n      });\n    }\n     // candycane\n    if (candyData && candyData.length > 0) {\n      candyData.forEach((item: LeaderboardItemInterface) => {\n        candyScores += item.score || 0;\n      });\n    }\n     // gingerman\n    if (gingerData && gingerData.length > 0) {\n      gingerData.forEach((item: LeaderboardItemInterface) => {\n        gingerScores += item.score || 0;\n      });\n    }\n    const newData = selectData.map((item, index) => {\n      const {\n        type,\n        userID,\n        score,\n        amount,\n        lastTimestamp,\n        avatar,\n        name,\n        userInfo,\n        meta,\n      } = item;\n      return {\n        type,\n        userID: userInfo.userID,\n        lastTimestamp,\n        rank: index,\n        score: score || 0,\n        userInfo,\n        meta: {\n          ...meta,\n        },\n        // roomID: userInfo.onliveInfo\n        //   ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n        //   : 0,\n      };\n    });\n    return {\n      data: newData,\n      scores: {\n        sock: sockScores,\n        candy: candyScores,\n        ginger: gingerScores,\n      },\n    };\n  }\n  return {\n    scores: {\n      sock: 0,\n      candy: 0,\n      ginger: 0,\n    },\n    data: [],\n  };\n};\n\nexport const sortTab210 = (data: any, team: string) => {\n  if (data && data.length) {\n    const [sockData, candyData, gingerData] = data;\n    let selectData = [];\n    switch (team) {\n      case 'ginger': {\n        selectData = gingerData || [];\n        break;\n      }\n      case 'candy': {\n        selectData = candyData || [];\n        break;\n      }\n      case 'sock':\n      default: {\n        selectData = sockData || [];\n      }\n    }\n    // total scores\n    let sockScores = 0;\n    let candyScores = 0;\n    let gingerScores = 0;\n    // socks\n    if (sockData && sockData.length > 0) {\n      sockData.forEach((item: LeaderboardItemInterface) => {\n        sockScores += item.score || 0;\n      });\n    }\n     // candycane\n    if (candyData && candyData.length > 0) {\n      candyData.forEach((item: LeaderboardItemInterface) => {\n        candyScores += item.score || 0;\n      });\n    }\n     // gingerman\n    if (gingerData && gingerData.length > 0) {\n      gingerData.forEach((item: LeaderboardItemInterface) => {\n        gingerScores += item.score || 0;\n      });\n    }\n    const newData = selectData.map((item, index) => {\n      const {\n        type,\n        userID,\n        score,\n        amount,\n        lastTimestamp,\n        avatar,\n        name,\n        userInfo,\n        meta,\n      } = item;\n      return {\n        type,\n        userID: userInfo.userID,\n        lastTimestamp,\n        rank: index,\n        score: score || 0,\n        userInfo,\n        meta: {\n          ...meta,\n        },\n        roomID: userInfo.onliveInfo\n          ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n          : 0,\n      };\n    });\n    return {\n      data: newData,\n      scores: {\n        sock: sockScores,\n        candy: candyScores,\n        ginger: gingerScores,\n      },\n    };\n  }\n  return {\n    scores: {\n      sock: 0,\n      candy: 0,\n      ginger: 0,\n    },\n    data: [],\n  };\n};\n\nexport const sortTab220 = (data: any, team: string) => {\n  if (data && data.length) {\n    const [sockData, candyData, gingerData] = data;\n    let selectData = [];\n    switch (team) {\n      case 'ginger': {\n        selectData = gingerData || [];\n        break;\n      }\n      case 'candy': {\n        selectData = candyData || [];\n        break;\n      }\n      case 'sock':\n      default: {\n        selectData = sockData || [];\n      }\n    }\n    // total scores\n    let sockScores = 0;\n    let candyScores = 0;\n    let gingerScores = 0;\n    // socks\n    if (sockData && sockData.length > 0) {\n      sockData.forEach((item: LeaderboardItemInterface) => {\n        sockScores += item.score || 0;\n      });\n    }\n     // candycane\n    if (candyData && candyData.length > 0) {\n      candyData.forEach((item: LeaderboardItemInterface) => {\n        candyScores += item.score || 0;\n      });\n    }\n     // gingerman\n    if (gingerData && gingerData.length > 0) {\n      gingerData.forEach((item: LeaderboardItemInterface) => {\n        gingerScores += item.score || 0;\n      });\n    }\n    const newData = selectData.map((item, index) => {\n      const {\n        type,\n        userID,\n        score,\n        amount,\n        lastTimestamp,\n        avatar,\n        name,\n        userInfo,\n        meta,\n      } = item;\n      return {\n        type,\n        userID: userInfo.userID,\n        lastTimestamp,\n        rank: index,\n        score: score || 0,\n        userInfo,\n        meta: {\n          ...meta,\n        },\n        // roomID: userInfo.onliveInfo\n        //   ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n        //   : 0,\n      };\n    });\n    return {\n      data: newData,\n      scores: {\n        sock: sockScores,\n        candy: candyScores,\n        ginger: gingerScores,\n      },\n    };\n  }\n  return {\n    scores: {\n      sock: 0,\n      candy: 0,\n      ginger: 0,\n    },\n    data: [],\n  };\n};\n\nexport const sortTab30 = (data: any) => {\n  if (data && data.length && data[0]) {\n    const newData = data[0].map((item, index) => {\n      const {\n        type,\n        userID,\n        score,\n        amount,\n        lastTimestamp,\n        avatar,\n        name,\n        userInfo,\n        meta,\n      } = item;\n      const bonus = {\n        total: 0,\n        r2: 0,\n        s4: 0,\n        ...meta,\n      };\n      return {\n        type,\n        userID: userInfo.userID,\n        lastTimestamp,\n        rank: index,\n        score: score || 0,\n        userInfo,\n        meta: {\n          ...bonus,\n          total: parseInt(bonus.r2, 10) + parseInt(bonus.s4, 10),\n        },\n        // roomID: userInfo.onliveInfo\n        //   ? parseInt(userInfo.onliveInfo.liveStreamID, 10)\n        //   : 0,\n      };\n    });\n    return newData;\n  }\n  return [];\n};"]},"metadata":{},"sourceType":"module"}