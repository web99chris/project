{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"D:\\\\17\\u5C08\\u6848\\\\\\u5BA2\\u88FD\\u5316ui\\u5C08\\u6848\\\\vmo-frontend-2011-tw-xmas\\\\packages\\\\web\\\\components\\\\leaderboard\\\\LeaderboardGeneral.tsx\";\nimport React, { useContext, memo, useMemo, useRef } from 'react';\nimport { useMinSectionTracking, createSectionViewAction } from '17media-browser-spy';\nimport { VirtualizedList, CopyButton } from '@vmo/ui';\nimport { TranslationContext } from '@vmo/web/context/translationContext';\nimport { useFilter } from '@vmo/ui/hooks';\nimport { trackingSource } from '@vmo/share/17appTrack';\nimport { WrapFilter, NoData, WrapLeaderboardItem, FrameBorder, ToggleButton, BonusToggleButton } from './style';\nimport { MissionPanelContext } from '../../context/missionPanelContext';\n\nconst LeaderboardGeneral = ({\n  leaderboardData,\n  render,\n  itemHeight,\n  panelSize = 0,\n  panelSize2 = 0,\n  withMissions = false,\n  withBonus = false\n}) => {\n  const translation = useContext(TranslationContext);\n  const {\n    data,\n    handleOnChange\n  } = useFilter(leaderboardData);\n  const refFilter = useRef(null);\n  const refLeaderboard = useRef(null);\n  const panelState = useContext(MissionPanelContext);\n  const {\n    showPanelID,\n    setShowPanelID,\n    setMissionDetails\n  } = panelState;\n  useMinSectionTracking(refFilter, () => {\n    trackingSource.track(createSectionViewAction('searchBar'));\n  });\n  useMinSectionTracking(refLeaderboard, () => {\n    trackingSource.track(createSectionViewAction('leaderboardItem'));\n  });\n\n  const handleToggleButton = useId => {\n    const newIndex = showPanelID === useId ? '' : useId;\n    setShowPanelID(newIndex);\n    setMissionDetails([]);\n    console.log('showPanelID:' + showPanelID + '   newIndex:' + newIndex + '   useId:' + useId);\n  }; // const handleToggleButton2 = (useId2: string) => {\n  //   const newIndex2 = showPanelID2 === useId2 ? '' : useId2;\n  //   setShowPanelID2(newIndex2); //寫入newIndex2無效\n  //   setBonusDetails([]);\n  //   console.log( 'showPanelID2:'+showPanelID2 +'   newIndex2:'+ newIndex2 +'   useId2:'+ useId2 );\n  // };\n\n\n  const Row = ({\n    index\n  }) => /*#__PURE__*/React.createElement(WrapLeaderboardItem, {\n    key: data[index].userID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, render(data[index], showPanelID === data[index].userID), withMissions && withBonus ? /*#__PURE__*/React.createElement(BonusToggleButton, {\n    isOpen: showPanelID === data[index].userID,\n    onClick: () => handleToggleButton(data[index].userID),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }) : withMissions ? /*#__PURE__*/React.createElement(ToggleButton, {\n    isOpen: showPanelID === data[index].userID,\n    onClick: () => handleToggleButton(data[index].userID),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }) : null);\n\n  const Filter = useMemo(() => /*#__PURE__*/React.createElement(WrapFilter, {\n    ref: refFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"\\u8ACB\\u8F38\\u5165\\u4E3B\\u64ADID\" // placeholder={translation.get('SEARCH_PLACEHOLDER')}\n    ,\n    onChange: evt => handleOnChange(evt.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }))), [handleOnChange, translation]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FrameBorder, {\n    ref: refLeaderboard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, Filter, /*#__PURE__*/React.createElement(CopyButton, {\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }), data.length > 0 ? /*#__PURE__*/React.createElement(VirtualizedList, {\n    dataset: data,\n    itemHeight: itemHeight,\n    updateOnID: showPanelID,\n    panelSize: panelSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, Row) : /*#__PURE__*/React.createElement(NoData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, translation.get('EMPTY_LEADERBOARD'))));\n};\n\nexport default memo(LeaderboardGeneral, (prev, next) => _JSON$stringify(prev) === _JSON$stringify(next));","map":{"version":3,"sources":["D:/17專案/客製化ui專案/vmo-frontend-2011-tw-xmas/packages/web/components/leaderboard/LeaderboardGeneral.tsx"],"names":["React","useContext","memo","useMemo","useRef","useMinSectionTracking","createSectionViewAction","VirtualizedList","CopyButton","TranslationContext","useFilter","trackingSource","WrapFilter","NoData","WrapLeaderboardItem","FrameBorder","ToggleButton","BonusToggleButton","MissionPanelContext","LeaderboardGeneral","leaderboardData","render","itemHeight","panelSize","panelSize2","withMissions","withBonus","translation","data","handleOnChange","refFilter","refLeaderboard","panelState","showPanelID","setShowPanelID","setMissionDetails","track","handleToggleButton","useId","newIndex","console","log","Row","index","userID","Filter","evt","target","value","length","get","prev","next"],"mappings":"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","sourcesContent":["import React, { useContext, memo, useMemo, ReactNode, useRef } from 'react';\nimport {\n  useMinSectionTracking,\n  createSectionViewAction,\n} from '17media-browser-spy';\n\nimport { VirtualizedList, CopyButton } from '@vmo/ui';\nimport { LeaderboardItem as LeaderboardItemInterface } from '@vmo/share/interfaces/LeaderboardItem';\nimport { TranslationContext } from '@vmo/web/context/translationContext';\nimport { useFilter } from '@vmo/ui/hooks';\nimport { trackingSource } from '@vmo/share/17appTrack';\n\nimport {\n  WrapFilter,\n  NoData,\n  WrapLeaderboardItem,\n  FrameBorder,\n  ToggleButton,\n  BonusToggleButton,\n} from './style';\nimport { MissionPanelContext } from '../../context/missionPanelContext';\n\nconst LeaderboardGeneral: React.FC<{\n  leaderboardData: LeaderboardItemInterface[];\n  render(item: LeaderboardItemInterface, showPanel: boolean ): ReactNode;\n  itemHeight: number;\n  panelSize?: number;\n  panelSize2?: number;\n  withMissions?: boolean;\n  withBonus?: boolean;\n}> = ({\n  leaderboardData,\n  render,\n  itemHeight,\n  panelSize = 0,\n  panelSize2 = 0,\n  withMissions = false,\n  withBonus = false,\n}) => {\n  const translation = useContext(TranslationContext);\n  const { data, handleOnChange } = useFilter(leaderboardData);\n  const refFilter = useRef(null);\n  const refLeaderboard = useRef(null);\n  const panelState = useContext(MissionPanelContext);\n  const { showPanelID, setShowPanelID, setMissionDetails } = panelState;\n  \n\n\n  useMinSectionTracking(refFilter, () => {\n    trackingSource.track(createSectionViewAction('searchBar'));\n  });\n\n  useMinSectionTracking(refLeaderboard, () => {\n    trackingSource.track(createSectionViewAction('leaderboardItem'));\n  });\n\n  const handleToggleButton = (useId: string) => {\n    const newIndex = showPanelID === useId ? '' : useId;\n    setShowPanelID(newIndex);\n    setMissionDetails([]);\n    console.log( 'showPanelID:'+showPanelID +'   newIndex:'+ newIndex +'   useId:'+ useId );\n  };\n\n  // const handleToggleButton2 = (useId2: string) => {\n  //   const newIndex2 = showPanelID2 === useId2 ? '' : useId2;\n  //   setShowPanelID2(newIndex2); //寫入newIndex2無效\n  //   setBonusDetails([]);\n  //   console.log( 'showPanelID2:'+showPanelID2 +'   newIndex2:'+ newIndex2 +'   useId2:'+ useId2 );\n  // };\n\n\n  const Row = ({ index }: { index: number }) => (\n    <WrapLeaderboardItem key={data[index].userID}>\n      {render(data[index], showPanelID === data[index].userID ) }\n\n      {/* {withMissions && (\n        <ToggleButton\n          isOpen={showPanelID === data[index].userID}\n          onClick={() => handleToggleButton(data[index].userID)}\n        />\n      )} */}\n         {withMissions && withBonus ?(\n        <BonusToggleButton\n        isOpen={showPanelID === data[index].userID}\n        onClick={() => handleToggleButton(data[index].userID)}\n        />\n        ) :\n\n        withMissions? (\n\n        <ToggleButton\n                isOpen={showPanelID === data[index].userID}\n                onClick={() => handleToggleButton(data[index].userID)}\n              />\n\n        ): null}\n\n\n    </WrapLeaderboardItem>\n  );\n\n\n\n  const Filter = useMemo(\n    () => (\n      <WrapFilter ref={refFilter}>\n        <div>\n          <input\n          placeholder=\"請輸入主播ID\"\n            // placeholder={translation.get('SEARCH_PLACEHOLDER')}\n            onChange={evt => handleOnChange(evt.target.value)}\n          />\n        </div>\n      </WrapFilter>\n    ),\n    [handleOnChange, translation],\n  );\n\n  return (\n    <>\n      {/* {Filter}\n      <CopyButton data={data} /> */}\n      <FrameBorder ref={refLeaderboard}>\n      {Filter}\n      <CopyButton data={data} />\n        {data.length > 0 ? (\n          <VirtualizedList\n            dataset={data}\n            itemHeight={itemHeight}\n            updateOnID={showPanelID}\n            panelSize={panelSize}\n          >\n            {Row}\n          </VirtualizedList>\n        ) : (\n          <NoData>{translation.get('EMPTY_LEADERBOARD')}</NoData>\n        )}\n      </FrameBorder>\n    </>\n  );\n};\n\nexport default memo(\n  LeaderboardGeneral,\n  (prev, next) => JSON.stringify(prev) === JSON.stringify(next),\n);\n"]},"metadata":{},"sourceType":"module"}