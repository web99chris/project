{"version":3,"file":"static/webpack/static\\development\\pages\\2011-tw-xmas-chris.js.de84bbabbf16e0866f4a.hot-update.js","sources":["webpack:///./components/LeaderboardContainer/LeaderboardContainer.tsx"],"sourcesContent":["// 2002-tw-alliance\nimport React, {\n  useState,\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n  useCallback,\n  useContext,\n} from 'react';\nimport { createPortal } from 'react-dom';\nimport styled from 'styled-components';\nimport { now } from '@17media/dad';\n\nimport { TabsRefContext } from '@vmo/ui/hooks/TabsRefContext';\nimport Loading from '@vmo/ui/Loading';\nimport useQueryString from '@vmo/ui/hooks/useQueryString';\nimport useTypeApi from '@vmo/ui/hooks/api/useTypeApi';\nimport { WrapperedProps } from '@vmo/ui/hoc/WithLeaderboard/WithLeaderboard';\nimport {\n  SectionTypes,\n  LocakTotalTime,\n  LocakTotalTime2,\n} from '@vmo/web/constants/config';\nimport {\n  useMinSectionTracking,\n  createSectionViewAction,\n} from '17media-browser-spy';\nimport { trackingSource } from '@vmo/share/17appTrack';\nimport { BackToTop } from '@vmo/web/components/Tabs/styled';\nimport { api } from '@vmo/web/constants/api';\nimport * as Conditions from '@vmo/web/constants/conditions';\nimport { Leaderboard } from '../leaderboard';\nimport images from '../../themes/images';\nimport { MissionPanelContext } from '../../context/missionPanelContext';\nimport { BonusPanelContext } from '../../context/bonusPanelContext';\n\nexport const LeaderboardContainerWrapper = styled.div<{\n  styleInfo?: { marginTop?: number };\n}>`\n  margin-top: ${props =>\n    props.styleInfo.marginTop ? `${props.styleInfo.marginTop}vw` : 0};\n  @media screen and (min-width: 800px) {\n    margin-top: ${props =>\n      props.styleInfo.marginTop\n        ? `calc((800 / 828) * ${((props.styleInfo.marginTop * 414) / 100) *\n            2}px)`\n        : 0};\n  }\n`;\n\nconst VideoContainer = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  margin: 0 auto;\n  font-weight: bold;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  background: rgba(0, 0, 0, 0.95);\n  top: 0;\n  left: 0;\n  video {\n    width: 100%;\n    height: 100%;\n    max-width: 800px;\n    min-height: 100vh;\n  }\n  img {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    width: 40px;\n    height: 40px;\n    cursor: pointer;\n    border: 1px solid #816530;\n    border-radius: 50%;\n  }\n`;\n\nconst Iframe: React.FC<{ src: string }> = ({ src }) => {\n  const descriptionRef = useRef(null);\n  useMinSectionTracking(descriptionRef, () => {\n    trackingSource.track(createSectionViewAction(SectionTypes.description));\n  });\n  useEffect(() => {\n    const frame = document.querySelector('#frame') as HTMLElement;\n    frame.style.overflow = 'hidden';\n    window.addEventListener('message', e => {\n      if (\n        e.data.source &&\n        e.data.source.indexOf('main-vision') === -1 &&\n        e.data.size\n      ) {\n        frame.style.height = `${e.data.size.height}px`;\n      }\n    });\n    return () => window.removeEventListener('message', () => {});\n  }, []);\n\n  return (\n    <iframe\n      ref={descriptionRef}\n      id=\"frame\"\n      src={src}\n      frameBorder=\"0\"\n      width=\"100%\"\n      scrolling=\"no\"\n      title=\"event description\"\n    />\n  );\n};\n\nconst RenderVideo = ({ src, poster, setShowVideo }) => {\n  const appBody = document.querySelector('body');\n  /* eslint-disable */\n  const content = (\n    <VideoContainer>\n      <video src={src} controls autoPlay poster={poster} />\n      <img\n        src={images.closeButton}\n        alt=\"\"\n        onClick={() => setShowVideo({ isShow: false, poster: '', video: '' })}\n      />\n    </VideoContainer>\n  );\n  /* eslint-enable */\n  useEffect(() => {\n    const body = document.querySelector('body');\n    body.style.overflow = 'hidden';\n    return () => {\n      body.style.overflow = 'auto';\n    };\n  }, []);\n  return createPortal(content, appBody);\n};\n\nconst checkLockTime = () => {\n  const nowTime = now() * 1000;\n  const locakTime = Date.parse(LocakTotalTime);\n  if (nowTime >= locakTime) {\n    return true;\n  }\n  return false;\n};\n\nconst checkLockTime2 = () => {\n  const nowTime = now() * 1000;\n  const locakTime = Date.parse(LocakTotalTime2);\n  if (nowTime >= locakTime) {\n    return true;\n  }\n  return false;\n};\n\nconst LeaderboardContainer: React.FC<WrapperedProps> = ({\n  apis,\n  sortFunc = data => data,\n  realTime = 0,\n  hashCheck = true,\n  iframe,\n  condition,\n  initialData,\n}) => {\n  const tabsRef = useContext(TabsRefContext);\n  const [showPanelID, setShowPanelID] = useState<string>('');\n  const [missionDetails, setMissionDetails] = useState([]);\n  const [showPanelID2, setShowPanelID2] = useState<string>('');\n  const [BonusDetails, setBonusDetails] = useState([]);\n  // let finalApis = apis;\n  // let finalConditaion = condition;\n  // if (apis && apis[0] && apis[0] === api.total.attend.before) {\n  //   if (checkLockTime2()) {\n  //     finalApis = [api.total.attend.after, api.total.bonus];\n  //     finalConditaion = Conditions.rank512;\n  //   } else if (checkLockTime()) {\n  //     finalApis = [api.total.attend.after, api.total.bonus];\n  //     finalConditaion = Conditions.rank511;\n  //   } else {\n  //     finalApis = [api.total.attend.before, api.total.bonus];\n  //     finalConditaion = Conditions.rank0;\n  //   }\n  // }\n  const { loading, leaderboardData } = useTypeApi(\n    // finalApis,\n    apis,\n    'GET',\n    realTime,\n    hashCheck,\n    initialData,\n  );\n  useQueryString(loading);\n  /* eslint-disable */\n  const props = useMemo(\n    () => ({\n      leaderboardData: sortFunc(leaderboardData),\n      condition,\n      isLocked: false,\n    }),\n    [leaderboardData, condition],\n    \n  );\n \n  /* eslint-enable */\n  if (loading) {\n    return (\n      <div id=\"loading-container\">\n        <Loading color=\"#fe41cb\" />\n      </div>\n    );\n  }\n  if (iframe) {\n    return (\n      <>\n        <div>\n          <Iframe src={iframe} />\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n    <MissionPanelContext.Provider\n      value={{ showPanelID, setShowPanelID, missionDetails, setMissionDetails }}\n    >\n      <Leaderboard {...props} />\n\n      {/* {condition && condition.missions && condition.missions.length > 0 && (\n        <MissionPanel condition={condition} />\n      )} */}\n\n    </MissionPanelContext.Provider>\n\n    {/* <BonusPanelContext.Provider\n    value={{ showPanelID2, setShowPanelID2,BonusDetails, setBonusDetails }}\n  >\n    <Leaderboard {...props} />\n    \n  </BonusPanelContext.Provider> */}\n  </>\n  );\n\n\n};\n\nexport default memo(LeaderboardContainer);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AAIA;AAIA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AACA;AA6BA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AAPA;AASA;AAZA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AArBA;AACA;AAgCA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AArBA;AACA;AAuvEA;AACA;AA0FA;;;;A","sourceRoot":""}