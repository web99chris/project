{"ast":null,"code":"const hosts = ['https://17.live', 'https://sta.17.live']; // to store recognized host in sessionStorage\n\nconst KEY_17LIVE_HOST = '17live/17LIVE_HOST'; // global method to send message\n\nconst sendMessage = data => {\n  const host = sessionStorage.getItem(KEY_17LIVE_HOST);\n  if (host) window.parent.postMessage(data, host);\n};\n/**\n * setup message tunnel and start receiving messages\n */\n\n\nif (typeof window !== 'undefined') {\n  window.addEventListener('message', ({\n    origin,\n    data: {\n      type,\n      payload\n    }\n  }) => {\n    // get, check, and set host origin\n    if (origin && sessionStorage.getItem(KEY_17LIVE_HOST) !== origin) {\n      const host = hosts.find(h => h === origin);\n\n      if (!host) {\n        return false;\n      }\n\n      sessionStorage.setItem(KEY_17LIVE_HOST, host);\n    } // receive auth info\n\n\n    if (type === '17live/Event/EVENT_AUTH_INFO') {\n      const {\n        userID,\n        accessToken\n      } = payload;\n      sessionStorage.setItem('userID', userID);\n      sessionStorage.setItem('accessToken', accessToken);\n    }\n  }, false);\n}\n/**\n * Actions\n */\n\n\nexport const open = openID => sendMessage({\n  type: '17live/Event/EVENT_SEND_AVATAR_LINK',\n  payload: openID\n});","map":{"version":3,"sources":["D:/17專案/客製化ui專案/2011-tw-xmas/vmo-frontend-2008-tw-momo/packages/share/17liveMessageTunnel.tsx"],"names":["hosts","KEY_17LIVE_HOST","sendMessage","data","host","sessionStorage","getItem","window","parent","postMessage","addEventListener","origin","type","payload","find","h","setItem","userID","accessToken","open","openID"],"mappings":"AAEA,MAAMA,KAAK,GAAG,CAAC,iBAAD,EAAoB,qBAApB,CAAd,C,CAEA;;AACA,MAAMC,eAAe,GAAG,oBAAxB,C,CAEA;;AACA,MAAMC,WAAW,GAAIC,IAAD,IAAe;AACjC,QAAMC,IAAI,GAAGC,cAAc,CAACC,OAAf,CAAuBL,eAAvB,CAAb;AACA,MAAIG,IAAJ,EAAUG,MAAM,CAACC,MAAP,CAAcC,WAAd,CAA0BN,IAA1B,EAAgCC,IAAhC;AACX,CAHD;AAKA;AACA;AACA;;;AACA,IAAI,OAAOG,MAAP,KAAkB,WAAtB,EAAmC;AACjCA,EAAAA,MAAM,CAACG,gBAAP,CACE,SADF,EAEE,CAAC;AAAEC,IAAAA,MAAF;AAAUR,IAAAA,IAAI,EAAE;AAAES,MAAAA,IAAF;AAAQC,MAAAA;AAAR;AAAhB,GAAD,KAAyC;AACvC;AACA,QAAIF,MAAM,IAAIN,cAAc,CAACC,OAAf,CAAuBL,eAAvB,MAA4CU,MAA1D,EAAkE;AAChE,YAAMP,IAAI,GAAGJ,KAAK,CAACc,IAAN,CAAWC,CAAC,IAAIA,CAAC,KAAKJ,MAAtB,CAAb;;AAEA,UAAI,CAACP,IAAL,EAAW;AACT,eAAO,KAAP;AACD;;AAEDC,MAAAA,cAAc,CAACW,OAAf,CAAuBf,eAAvB,EAAwCG,IAAxC;AACD,KAVsC,CAYvC;;;AACA,QAAIQ,IAAI,KAAK,8BAAb,EAA6C;AAC3C,YAAM;AAAEK,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAA0BL,OAAhC;AAEAR,MAAAA,cAAc,CAACW,OAAf,CAAuB,QAAvB,EAAiCC,MAAjC;AACAZ,MAAAA,cAAc,CAACW,OAAf,CAAuB,aAAvB,EAAsCE,WAAtC;AACD;AACF,GArBH,EAsBE,KAtBF;AAwBD;AACD;AACA;AACA;;;AACA,OAAO,MAAMC,IAAI,GAAIC,MAAD,IAClBlB,WAAW,CAAC;AACVU,EAAAA,IAAI,EAAE,qCADI;AAEVC,EAAAA,OAAO,EAAEO;AAFC,CAAD,CADN","sourcesContent":["import React, { useEffect } from 'react';\n\nconst hosts = ['https://17.live', 'https://sta.17.live'];\n\n// to store recognized host in sessionStorage\nconst KEY_17LIVE_HOST = '17live/17LIVE_HOST';\n\n// global method to send message\nconst sendMessage = (data: any) => {\n  const host = sessionStorage.getItem(KEY_17LIVE_HOST);\n  if (host) window.parent.postMessage(data, host);\n};\n\n/**\n * setup message tunnel and start receiving messages\n */\nif (typeof window !== 'undefined') {\n  window.addEventListener(\n    'message',\n    ({ origin, data: { type, payload } }) => {\n      // get, check, and set host origin\n      if (origin && sessionStorage.getItem(KEY_17LIVE_HOST) !== origin) {\n        const host = hosts.find(h => h === origin);\n\n        if (!host) {\n          return false;\n        }\n\n        sessionStorage.setItem(KEY_17LIVE_HOST, host);\n      }\n\n      // receive auth info\n      if (type === '17live/Event/EVENT_AUTH_INFO') {\n        const { userID, accessToken } = payload;\n\n        sessionStorage.setItem('userID', userID);\n        sessionStorage.setItem('accessToken', accessToken);\n      }\n    },\n    false,\n  );\n}\n/**\n * Actions\n */\nexport const open = (openID: string) =>\n  sendMessage({\n    type: '17live/Event/EVENT_SEND_AVATAR_LINK',\n    payload: openID,\n  });\n"]},"metadata":{},"sourceType":"module"}