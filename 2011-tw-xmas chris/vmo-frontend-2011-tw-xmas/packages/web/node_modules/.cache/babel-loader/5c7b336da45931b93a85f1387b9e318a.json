{"ast":null,"code":"import { getInstance } from '@vmo/share/services/axios';\nimport { getType } from '@vmo/share/utils';\nconst url = `/v1/leaderboards/eventory`;\nexport const getLeaderboardEventory = async (type, cancelToken, limit = 1000, cursor = '', method = 'POST', callBack = data => {}) => {\n  const axios = getInstance();\n  const body = {\n    type: getType(type),\n    count: limit,\n    cursor\n  };\n  let res;\n\n  if (method === 'POST') {\n    res = await axios.post(url, body, {\n      cancelToken\n    });\n  } else {\n    res = await axios.get(url, {\n      params: {\n        containerID: getType(type),\n        count: limit,\n        cursor,\n        onliveInfo: 1\n      },\n      cancelToken\n    });\n  }\n\n  const {\n    nextCursor,\n    data\n  } = res.data;\n\n  if (callBack) {\n    callBack(data);\n  }\n\n  if (nextCursor) {\n    return [...data, ...(await getLeaderboardEventory(type, cancelToken, limit, nextCursor, method))];\n  }\n\n  return data;\n};\nexport const getEventoryDetails = async (EventoryKey, subKeys, cancelToken) => {\n  const instance = getInstance();\n  const res = await instance.get(url, {\n    params: {\n      containerID: getType(EventoryKey),\n      count: 1000,\n      'subkeys[]': subKeys\n    },\n    cancelToken\n  });\n  return res.data || [];\n};","map":{"version":3,"sources":["D:/17專案/客製化ui專案/2011-tw-xmas chris/vmo-frontend-2011-tw-xmas/packages/share/services/leaderboardEventory.service.ts"],"names":["getInstance","getType","url","getLeaderboardEventory","type","cancelToken","limit","cursor","method","callBack","data","axios","body","count","res","post","get","params","containerID","onliveInfo","nextCursor","getEventoryDetails","EventoryKey","subKeys","instance"],"mappings":"AAAA,SAASA,WAAT,QAA4B,2BAA5B;AAGA,SAASC,OAAT,QAAwB,kBAAxB;AAEA,MAAMC,GAAG,GAAI,2BAAb;AAEA,OAAO,MAAMC,sBAAsB,GAAG,OACpCC,IADoC,EAKpCC,WALoC,EAMpCC,KAAK,GAAG,IAN4B,EAOpCC,MAAM,GAAG,EAP2B,EAQpCC,MAAM,GAAG,MAR2B,EASpCC,QAAQ,GAAGC,IAAI,IAAI,CAAE,CATe,KAUL;AAC/B,QAAMC,KAAK,GAAGX,WAAW,EAAzB;AAEA,QAAMY,IAAI,GAAG;AAAER,IAAAA,IAAI,EAAEH,OAAO,CAACG,IAAD,CAAf;AAAuBS,IAAAA,KAAK,EAAEP,KAA9B;AAAqCC,IAAAA;AAArC,GAAb;AACA,MAAIO,GAAJ;;AACA,MAAIN,MAAM,KAAK,MAAf,EAAuB;AACrBM,IAAAA,GAAG,GAAG,MAAMH,KAAK,CAACI,IAAN,CAAWb,GAAX,EAAgBU,IAAhB,EAAsB;AAAEP,MAAAA;AAAF,KAAtB,CAAZ;AACD,GAFD,MAEO;AACLS,IAAAA,GAAG,GAAG,MAAMH,KAAK,CAACK,GAAN,CAAUd,GAAV,EAAe;AACzBe,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAEjB,OAAO,CAACG,IAAD,CADd;AAENS,QAAAA,KAAK,EAAEP,KAFD;AAGNC,QAAAA,MAHM;AAINY,QAAAA,UAAU,EAAE;AAJN,OADiB;AAOzBd,MAAAA;AAPyB,KAAf,CAAZ;AASD;;AAED,QAAM;AAAEe,IAAAA,UAAF;AAAcV,IAAAA;AAAd,MAAuBI,GAAG,CAACJ,IAAjC;;AAEA,MAAID,QAAJ,EAAc;AACZA,IAAAA,QAAQ,CAACC,IAAD,CAAR;AACD;;AAED,MAAIU,UAAJ,EAAgB;AACd,WAAO,CACL,GAAGV,IADE,EAEL,IAAI,MAAMP,sBAAsB,CAC9BC,IAD8B,EAE9BC,WAF8B,EAG9BC,KAH8B,EAI9Bc,UAJ8B,EAK9BZ,MAL8B,CAAhC,CAFK,CAAP;AAUD;;AACD,SAAOE,IAAP;AACD,CAhDM;AAkDP,OAAO,MAAMW,kBAAkB,GAAG,OAChCC,WADgC,EAKhCC,OALgC,EAMhClB,WANgC,KAOD;AAC/B,QAAMmB,QAAQ,GAAGxB,WAAW,EAA5B;AAEA,QAAMc,GAAG,GAAG,MAAMU,QAAQ,CAACR,GAAT,CAAad,GAAb,EAAkB;AAClCe,IAAAA,MAAM,EAAE;AACNC,MAAAA,WAAW,EAAEjB,OAAO,CAACqB,WAAD,CADd;AAENT,MAAAA,KAAK,EAAE,IAFD;AAGN,mBAAaU;AAHP,KAD0B;AAMlClB,IAAAA;AANkC,GAAlB,CAAlB;AASA,SAAOS,GAAG,CAACJ,IAAJ,IAAY,EAAnB;AACD,CApBM","sourcesContent":["import { getInstance } from '@vmo/share/services/axios';\nimport { LeaderboardItem } from '@vmo/share/interfaces/LeaderboardItem';\nimport { CancelToken } from 'axios';\nimport { getType } from '@vmo/share/utils';\n\nconst url = `/v1/leaderboards/eventory`;\n\nexport const getLeaderboardEventory = async (\n  type: {\n    sta: string;\n    prod: string;\n  },\n  cancelToken: CancelToken,\n  limit = 1000,\n  cursor = '',\n  method = 'POST',\n  callBack = data => {},\n): Promise<LeaderboardItem[]> => {\n  const axios = getInstance();\n\n  const body = { type: getType(type), count: limit, cursor };\n  let res;\n  if (method === 'POST') {\n    res = await axios.post(url, body, { cancelToken });\n  } else {\n    res = await axios.get(url, {\n      params: {\n        containerID: getType(type),\n        count: limit,\n        cursor,\n        onliveInfo: 1,\n      },\n      cancelToken,\n    });\n  }\n\n  const { nextCursor, data } = res.data;\n\n  if (callBack) {\n    callBack(data);\n  }\n\n  if (nextCursor) {\n    return [\n      ...data,\n      ...(await getLeaderboardEventory(\n        type,\n        cancelToken,\n        limit,\n        nextCursor,\n        method,\n      )),\n    ];\n  }\n  return data;\n};\n\nexport const getEventoryDetails = async (\n  EventoryKey: {\n    sta: string;\n    prod: string;\n  },\n  subKeys: string,\n  cancelToken: CancelToken,\n): Promise<LeaderboardItem[]> => {\n  const instance = getInstance();\n\n  const res = await instance.get(url, {\n    params: {\n      containerID: getType(EventoryKey),\n      count: 1000,\n      'subkeys[]': subKeys,\n    },\n    cancelToken,\n  });\n\n  return res.data || [];\n};\n"]},"metadata":{},"sourceType":"module"}