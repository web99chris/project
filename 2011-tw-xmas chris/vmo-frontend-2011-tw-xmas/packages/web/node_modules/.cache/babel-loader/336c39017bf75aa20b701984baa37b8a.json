{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"D:\\\\17\\u5C08\\u6848\\\\\\u5BA2\\u88FD\\u5316ui\\u5C08\\u6848\\\\test2\\\\vmo-frontend-2008-tw-momo\\\\packages\\\\web\\\\components\\\\leaderboard\\\\LeaderboardGeneral.tsx\";\nimport React, { useContext, memo, useMemo, useRef } from 'react';\nimport { useMinSectionTracking, createSectionViewAction } from '17media-browser-spy';\nimport { VirtualizedList, CopyButton } from '@vmo/ui';\nimport { TranslationContext } from '@vmo/web/context/translationContext';\nimport { useFilter } from '@vmo/ui/hooks';\nimport { trackingSource } from '@vmo/share/17appTrack';\nimport { WrapFilter, NoData, WrapLeaderboardItem, FrameBorder, ToggleButton } from './style';\nimport { MissionPanelContext } from '../../context/missionPanelContext';\n\nconst LeaderboardGeneral = ({\n  leaderboardData,\n  render,\n  itemHeight,\n  panelSize = 0,\n  withMissions = false\n}) => {\n  const translation = useContext(TranslationContext);\n  const {\n    data,\n    handleOnChange\n  } = useFilter(leaderboardData);\n  const refFilter = useRef(null);\n  const refLeaderboard = useRef(null);\n  const panelState = useContext(MissionPanelContext);\n  const {\n    showPanelID,\n    setShowPanelID,\n    setMissionDetails\n  } = panelState;\n  useMinSectionTracking(refFilter, () => {\n    trackingSource.track(createSectionViewAction('searchBar'));\n  });\n  useMinSectionTracking(refLeaderboard, () => {\n    trackingSource.track(createSectionViewAction('leaderboardItem'));\n  });\n\n  const handleToggleButton = useId => {\n    const newIndex = showPanelID === useId ? '' : useId;\n    setShowPanelID(newIndex);\n    setMissionDetails([]);\n  };\n\n  const Row = ({\n    index\n  }) => React.createElement(WrapLeaderboardItem, {\n    key: data[index].userID,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, render(data[index], showPanelID === data[index].userID), withMissions && React.createElement(ToggleButton, {\n    isOpen: showPanelID === data[index].userID,\n    onClick: () => handleToggleButton(data[index].userID),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n\n  const Filter = useMemo(() => React.createElement(WrapFilter, {\n    ref: refFilter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: translation.get('SEARCH_PLACEHOLDER'),\n    onChange: evt => handleOnChange(evt.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }))), [handleOnChange, translation]);\n  return React.createElement(React.Fragment, null, React.createElement(FrameBorder, {\n    ref: refLeaderboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, Filter, React.createElement(CopyButton, {\n    data: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), data.length > 0 ? React.createElement(VirtualizedList, {\n    dataset: data,\n    itemHeight: itemHeight,\n    updateOnID: showPanelID,\n    panelSize: panelSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, Row) : React.createElement(NoData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, translation.get('EMPTY_LEADERBOARD'))));\n};\n\nexport default memo(LeaderboardGeneral, (prev, next) => _JSON$stringify(prev) === _JSON$stringify(next));","map":{"version":3,"sources":["D:\\17專案\\客製化ui專案\\test2\\vmo-frontend-2008-tw-momo\\packages\\web\\components\\leaderboard\\LeaderboardGeneral.tsx"],"names":["LeaderboardGeneral","panelSize","withMissions","translation","useContext","handleOnChange","useFilter","refFilter","useRef","refLeaderboard","panelState","setMissionDetails","useMinSectionTracking","trackingSource","createSectionViewAction","handleToggleButton","useId","newIndex","showPanelID","setShowPanelID","Row","index","data","render","Filter","useMemo","evt","memo"],"mappings":"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","sourcesContent":["import React, { useContext, memo, useMemo, ReactNode, useRef } from 'react';\nimport {\n  useMinSectionTracking,\n  createSectionViewAction,\n} from '17media-browser-spy';\n\nimport { VirtualizedList, CopyButton } from '@vmo/ui';\nimport { LeaderboardItem as LeaderboardItemInterface } from '@vmo/share/interfaces/LeaderboardItem';\nimport { TranslationContext } from '@vmo/web/context/translationContext';\nimport { useFilter } from '@vmo/ui/hooks';\nimport { trackingSource } from '@vmo/share/17appTrack';\n\nimport {\n  WrapFilter,\n  NoData,\n  WrapLeaderboardItem,\n  FrameBorder,\n  ToggleButton,\n} from './style';\nimport { MissionPanelContext } from '../../context/missionPanelContext';\n\nconst LeaderboardGeneral: React.FC<{\n  leaderboardData: LeaderboardItemInterface[];\n  render(item: LeaderboardItemInterface, showPanel: boolean): ReactNode;\n  itemHeight: number;\n  panelSize?: number;\n  withMissions?: boolean;\n}> = ({\n  leaderboardData,\n  render,\n  itemHeight,\n  panelSize = 0,\n  withMissions = false,\n}) => {\n  const translation = useContext(TranslationContext);\n  const { data, handleOnChange } = useFilter(leaderboardData);\n  const refFilter = useRef(null);\n  const refLeaderboard = useRef(null);\n  const panelState = useContext(MissionPanelContext);\n  const { showPanelID, setShowPanelID, setMissionDetails } = panelState;\n\n  useMinSectionTracking(refFilter, () => {\n    trackingSource.track(createSectionViewAction('searchBar'));\n  });\n\n  useMinSectionTracking(refLeaderboard, () => {\n    trackingSource.track(createSectionViewAction('leaderboardItem'));\n  });\n\n  const handleToggleButton = (useId: string) => {\n    const newIndex = showPanelID === useId ? '' : useId;\n    setShowPanelID(newIndex);\n    setMissionDetails([]);\n  };\n\n  const Row = ({ index }: { index: number }) => (\n    <WrapLeaderboardItem key={data[index].userID}>\n      {render(data[index], showPanelID === data[index].userID)}\n      {withMissions && (\n        <ToggleButton\n          isOpen={showPanelID === data[index].userID}\n          onClick={() => handleToggleButton(data[index].userID)}\n        />\n      )}\n    </WrapLeaderboardItem>\n  );\n\n  const Filter = useMemo(\n    () => (\n      <WrapFilter ref={refFilter}>\n        <div>\n          <input\n            placeholder={translation.get('SEARCH_PLACEHOLDER')}\n            onChange={evt => handleOnChange(evt.target.value)}\n          />\n        </div>\n      </WrapFilter>\n    ),\n    [handleOnChange, translation],\n  );\n\n  return (\n    <>\n    \n      <FrameBorder ref={refLeaderboard}>\n      {Filter}\n      <CopyButton data={data} />\n        {data.length > 0 ? (\n          <VirtualizedList\n            dataset={data}\n            itemHeight={itemHeight}\n            updateOnID={showPanelID}\n            panelSize={panelSize}\n          >\n            {Row}\n          </VirtualizedList>\n        ) : (\n          <NoData>{translation.get('EMPTY_LEADERBOARD')}</NoData>\n        )}\n      </FrameBorder>\n    </>\n  );\n};\n\nexport default memo(\n  LeaderboardGeneral,\n  (prev, next) => JSON.stringify(prev) === JSON.stringify(next),\n);\n"]},"metadata":{},"sourceType":"module"}