{"ast":null,"code":"import _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport { useState, useEffect, useCallback } from 'react';\nconst defaultLang = 'zh_TW';\n\nconst useTranslation = startRender => {\n  const [translation, setTranslation] = useState(new _Map());\n  const getTranslation = useCallback(async () => {\n    // eslint-disable-next-line\n    const response = require('../../web/constants/translations.json');\n\n    if (response && response.length > 0) {\n      const translationTransformed = new _Map();\n      response.forEach(item => {\n        const {\n          key\n        } = item;\n        const langItem = item.values.find(data => data.language === defaultLang);\n        let langValue = '';\n\n        if (langItem) {\n          langValue = langItem.value;\n        } else {\n          const zhLangItem = item.values.find(data => data.language === 'defaultLang');\n\n          if (zhLangItem) {\n            langValue = zhLangItem.value;\n          }\n        }\n\n        translationTransformed.set(key, langValue);\n      });\n      setTranslation(translationTransformed);\n    }\n  }, []);\n  useEffect(() => {\n    if (startRender) {\n      getTranslation();\n    }\n  }, [getTranslation, startRender]);\n  return translation;\n};\n\nexport default useTranslation;","map":{"version":3,"sources":["D:/17專案/客製化ui專案/2011-tw-xmas/vmo-frontend-2008-tw-momo/packages/ui/hooks/useTranslation.ts"],"names":["useState","useEffect","useCallback","defaultLang","useTranslation","startRender","translation","setTranslation","getTranslation","response","require","length","translationTransformed","forEach","item","key","langItem","values","find","data","language","langValue","value","zhLangItem","set"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAQA,MAAMC,WAAW,GAAG,OAApB;;AAEA,MAAMC,cAAc,GAAIC,WAAD,IAA0B;AAC/C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAC5C,UAD4C,CAA9C;AAGA,QAAMQ,cAAc,GAAGN,WAAW,CAAC,YAAY;AAC7C;AACA,UAAMO,QAAgC,GAAGC,OAAO,CAAC,uCAAD,CAAhD;;AACA,QAAID,QAAQ,IAAIA,QAAQ,CAACE,MAAT,GAAkB,CAAlC,EAAqC;AACnC,YAAMC,sBAA2C,GAAG,UAApD;AACAH,MAAAA,QAAQ,CAACI,OAAT,CAAiBC,IAAI,IAAI;AACvB,cAAM;AAAEC,UAAAA;AAAF,YAAUD,IAAhB;AACA,cAAME,QAAQ,GAAGF,IAAI,CAACG,MAAL,CAAYC,IAAZ,CACfC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBjB,WADX,CAAjB;AAGA,YAAIkB,SAAS,GAAG,EAAhB;;AACA,YAAIL,QAAJ,EAAc;AACZK,UAAAA,SAAS,GAAGL,QAAQ,CAACM,KAArB;AACD,SAFD,MAEO;AACL,gBAAMC,UAAU,GAAGT,IAAI,CAACG,MAAL,CAAYC,IAAZ,CACjBC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkB,aADT,CAAnB;;AAGA,cAAIG,UAAJ,EAAgB;AACdF,YAAAA,SAAS,GAAGE,UAAU,CAACD,KAAvB;AACD;AACF;;AACDV,QAAAA,sBAAsB,CAACY,GAAvB,CAA2BT,GAA3B,EAAgCM,SAAhC;AACD,OAjBD;AAkBAd,MAAAA,cAAc,CAACK,sBAAD,CAAd;AACD;AACF,GAzBiC,EAyB/B,EAzB+B,CAAlC;AA0BAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,WAAJ,EAAiB;AACfG,MAAAA,cAAc;AACf;AACF,GAJQ,EAIN,CAACA,cAAD,EAAiBH,WAAjB,CAJM,CAAT;AAKA,SAAOC,WAAP;AACD,CApCD;;AAsCA,eAAeF,cAAf","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nimport {\n  getTranslation as getTranslationService,\n  Translation as translationInterface,\n} from '@vmo/share/services/translation.service';\nimport { PAGE_PATH } from '@vmo/web/constants/config';\n\nconst defaultLang = 'zh_TW';\n\nconst useTranslation = (startRender: boolean) => {\n  const [translation, setTranslation] = useState<Map<string, string>>(\n    new Map(),\n  );\n  const getTranslation = useCallback(async () => {\n    // eslint-disable-next-line\n    const response: translationInterface[] = require('../../web/constants/translations.json');\n    if (response && response.length > 0) {\n      const translationTransformed: Map<string, string> = new Map();\n      response.forEach(item => {\n        const { key } = item;\n        const langItem = item.values.find(\n          data => data.language === defaultLang,\n        )!;\n        let langValue = '';\n        if (langItem) {\n          langValue = langItem.value;\n        } else {\n          const zhLangItem = item.values.find(\n            data => data.language === 'defaultLang',\n          )!;\n          if (zhLangItem) {\n            langValue = zhLangItem.value;\n          }\n        }\n        translationTransformed.set(key, langValue);\n      });\n      setTranslation(translationTransformed);\n    }\n  }, []);\n  useEffect(() => {\n    if (startRender) {\n      getTranslation();\n    }\n  }, [getTranslation, startRender]);\n  return translation;\n};\n\nexport default useTranslation;\n"]},"metadata":{},"sourceType":"module"}