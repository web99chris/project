{"ast":null,"code":"import { getInstance } from '@vmo/share/services/axios';\nimport { getType } from '@vmo/share/utils';\nexport const getLeaderboard = async (type, cancelToken, limit = 1000, cursor = '', method = 'POST', callBack = data => {}) => {\n  const axios = getInstance();\n  const url = `/v1/leaderboards/mktevent`;\n  const body = {\n    type: getType(type),\n    count: limit,\n    cursor\n  };\n  let res;\n\n  if (method === 'POST') {\n    res = await axios.post(url, body, {\n      cancelToken\n    });\n  } else {\n    res = await axios.get(url, {\n      params: {\n        type: getType(type),\n        count: limit,\n        cursor,\n        onliveInfo: 1\n      },\n      cancelToken\n    });\n  }\n\n  const {\n    nextCursor,\n    data\n  } = res.data;\n\n  if (callBack) {\n    callBack(data);\n  }\n\n  if (nextCursor) {\n    return [...data, ...(await getLeaderboard(type, cancelToken, limit, nextCursor, method))];\n  }\n\n  return data;\n};","map":{"version":3,"sources":["D:\\17專案\\客製化ui專案\\test2\\vmo-frontend-2008-tw-momo\\packages\\share\\services\\leaderboard.service.ts"],"names":["getInstance","getType","getLeaderboard","type","cancelToken","limit","cursor","method","callBack","data","axios","url","body","count","res","post","get","params","onliveInfo","nextCursor"],"mappings":"AAAA,SAASA,WAAT,QAA4B,2BAA5B;AAGA,SAASC,OAAT,QAAwB,kBAAxB;AAEA,OAAO,MAAMC,cAAc,GAAG,OAC5BC,IAD4B,EAK5BC,WAL4B,EAM5BC,KAAK,GAAG,IANoB,EAO5BC,MAAM,GAAG,EAPmB,EAQ5BC,MAAM,GAAG,MARmB,EAS5BC,QAAQ,GAAGC,IAAI,IAAI,CAAE,CATO,KAUG;AAC/B,QAAMC,KAAK,GAAGV,WAAW,EAAzB;AAEA,QAAMW,GAAG,GAAI,2BAAb;AACA,QAAMC,IAAI,GAAG;AAAET,IAAAA,IAAI,EAAEF,OAAO,CAACE,IAAD,CAAf;AAAuBU,IAAAA,KAAK,EAAER,KAA9B;AAAqCC,IAAAA;AAArC,GAAb;AACA,MAAIQ,GAAJ;;AACA,MAAIP,MAAM,KAAK,MAAf,EAAuB;AACrBO,IAAAA,GAAG,GAAG,MAAMJ,KAAK,CAACK,IAAN,CAAWJ,GAAX,EAAgBC,IAAhB,EAAsB;AAAER,MAAAA;AAAF,KAAtB,CAAZ;AACD,GAFD,MAEO;AACLU,IAAAA,GAAG,GAAG,MAAMJ,KAAK,CAACM,GAAN,CAAUL,GAAV,EAAe;AACzBM,MAAAA,MAAM,EAAE;AACNd,QAAAA,IAAI,EAAEF,OAAO,CAACE,IAAD,CADP;AAENU,QAAAA,KAAK,EAAER,KAFD;AAGNC,QAAAA,MAHM;AAINY,QAAAA,UAAU,EAAE;AAJN,OADiB;AAOzBd,MAAAA;AAPyB,KAAf,CAAZ;AASD;;AAED,QAAM;AAAEe,IAAAA,UAAF;AAAcV,IAAAA;AAAd,MAAuBK,GAAG,CAACL,IAAjC;;AAEA,MAAID,QAAJ,EAAc;AACZA,IAAAA,QAAQ,CAACC,IAAD,CAAR;AACD;;AAED,MAAIU,UAAJ,EAAgB;AACd,WAAO,CACL,GAAGV,IADE,EAEL,IAAI,MAAMP,cAAc,CAACC,IAAD,EAAOC,WAAP,EAAoBC,KAApB,EAA2Bc,UAA3B,EAAuCZ,MAAvC,CAAxB,CAFK,CAAP;AAID;;AACD,SAAOE,IAAP;AACD,CA3CM","sourcesContent":["import { getInstance } from '@vmo/share/services/axios';\nimport { LeaderboardItem } from '@vmo/share/interfaces/LeaderboardItem';\nimport { CancelToken } from 'axios';\nimport { getType } from '@vmo/share/utils';\n\nexport const getLeaderboard = async (\n  type: {\n    sta: string;\n    prod: string;\n  },\n  cancelToken: CancelToken,\n  limit = 1000,\n  cursor = '',\n  method = 'POST',\n  callBack = data => {},\n): Promise<LeaderboardItem[]> => {\n  const axios = getInstance();\n\n  const url = `/v1/leaderboards/mktevent`;\n  const body = { type: getType(type), count: limit, cursor };\n  let res;\n  if (method === 'POST') {\n    res = await axios.post(url, body, { cancelToken });\n  } else {\n    res = await axios.get(url, {\n      params: {\n        type: getType(type),\n        count: limit,\n        cursor,\n        onliveInfo: 1,\n      },\n      cancelToken,\n    });\n  }\n\n  const { nextCursor, data } = res.data;\n\n  if (callBack) {\n    callBack(data);\n  }\n\n  if (nextCursor) {\n    return [\n      ...data,\n      ...(await getLeaderboard(type, cancelToken, limit, nextCursor, method)),\n    ];\n  }\n  return data;\n};\n"]},"metadata":{},"sourceType":"module"}